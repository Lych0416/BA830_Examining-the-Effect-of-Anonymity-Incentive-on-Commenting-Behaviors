{"cells":[{"cell_type":"markdown","metadata":{"id":"TqxzAjb8mwx-"},"source":["# Examining the Effect of Anonymity & Incentive on Individual Commenting Behaviors\n","Group 3: Yuchen Li, Simiao Ye, Han Nga Chan, I-An Chien\n"]},{"cell_type":"markdown","metadata":{"id":"AWLZQQ4NJm5Q"},"source":["# Data Cleaning"]},{"cell_type":"markdown","metadata":{"id":"7TTdDvWaJqRa"},"source":["## Import"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":325},"executionInfo":{"elapsed":26873,"status":"ok","timestamp":1709852492500,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"5M1i6G0pqdvu","outputId":"ca71473e-8dae-463b-9eb7-8f9cce0152bf"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive/\n"]},{"output_type":"execute_result","data":{"text/plain":["                                           StartDate  \\\n","0                                         Start Date   \n","1  {\"ImportId\":\"startDate\",\"timeZone\":\"America/De...   \n","2                                2024-02-23 17:00:34   \n","3                                2024-02-23 17:03:06   \n","4                                2024-02-23 17:04:38   \n","\n","                                             EndDate                 Status  \\\n","0                                           End Date          Response Type   \n","1  {\"ImportId\":\"endDate\",\"timeZone\":\"America/Denv...  {\"ImportId\":\"status\"}   \n","2                                2024-02-23 17:01:13         Survey Preview   \n","3                                2024-02-23 17:03:29         Survey Preview   \n","4                                2024-02-23 17:04:54         Survey Preview   \n","\n","                  IPAddress                 Progress    Duration (in seconds)  \\\n","0                IP Address                 Progress    Duration (in seconds)   \n","1  {\"ImportId\":\"ipAddress\"}  {\"ImportId\":\"progress\"}  {\"ImportId\":\"duration\"}   \n","2                       NaN                      100                       39   \n","3                       NaN                      100                       23   \n","4                       NaN                      100                       16   \n","\n","                  Finished                                       RecordedDate  \\\n","0                 Finished                                      Recorded Date   \n","1  {\"ImportId\":\"finished\"}  {\"ImportId\":\"recordedDate\",\"timeZone\":\"America...   \n","2                     True                                2024-02-23 17:01:14   \n","3                     True                                2024-02-23 17:03:30   \n","4                     True                                2024-02-23 17:04:55   \n","\n","                 ResponseId                 RecipientLastName  ...  \\\n","0               Response ID               Recipient Last Name  ...   \n","1  {\"ImportId\":\"_recordId\"}  {\"ImportId\":\"recipientLastName\"}  ...   \n","2         R_6rqPAbYtnYUoXy3                               NaN  ...   \n","3         R_6QdUvRWgstydyIV                               NaN  ...   \n","4         R_5HnRvA2gTVOw8tw                               NaN  ...   \n","\n","                                           Q1_5_TEXT  \\\n","0  What would be the amount of incentives that yo...   \n","1                        {\"ImportId\":\"QID26_5_TEXT\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                 Q29                                  Q32  \\\n","0  Which age group do you belong to?  How would you describe your gender?   \n","1               {\"ImportId\":\"QID29\"}                 {\"ImportId\":\"QID32\"}   \n","2                                NaN                                  NaN   \n","3                                NaN                                  NaN   \n","4                                NaN                                  NaN   \n","\n","                                               Q33_1  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_1\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                               Q33_2  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_2\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                               Q33_3  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_3\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                               Q33_4  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_4\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                               Q33_5  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_5\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                    Outro_Incentive 1                       Outro_Incentive 2  \n","0  Please enter your full name below.  Please enter your email address below.  \n","1           {\"ImportId\":\"QID30_TEXT\"}               {\"ImportId\":\"QID31_TEXT\"}  \n","2                                 NaN                                     NaN  \n","3                                 NaN                                     NaN  \n","4                                 NaN                                     NaN  \n","\n","[5 rows x 40 columns]"],"text/html":["\n","  <div id=\"df-02476347-a5ff-4201-a0b1-745b7d60f129\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>StartDate</th>\n","      <th>EndDate</th>\n","      <th>Status</th>\n","      <th>IPAddress</th>\n","      <th>Progress</th>\n","      <th>Duration (in seconds)</th>\n","      <th>Finished</th>\n","      <th>RecordedDate</th>\n","      <th>ResponseId</th>\n","      <th>RecipientLastName</th>\n","      <th>...</th>\n","      <th>Q1_5_TEXT</th>\n","      <th>Q29</th>\n","      <th>Q32</th>\n","      <th>Q33_1</th>\n","      <th>Q33_2</th>\n","      <th>Q33_3</th>\n","      <th>Q33_4</th>\n","      <th>Q33_5</th>\n","      <th>Outro_Incentive 1</th>\n","      <th>Outro_Incentive 2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Start Date</td>\n","      <td>End Date</td>\n","      <td>Response Type</td>\n","      <td>IP Address</td>\n","      <td>Progress</td>\n","      <td>Duration (in seconds)</td>\n","      <td>Finished</td>\n","      <td>Recorded Date</td>\n","      <td>Response ID</td>\n","      <td>Recipient Last Name</td>\n","      <td>...</td>\n","      <td>What would be the amount of incentives that yo...</td>\n","      <td>Which age group do you belong to?</td>\n","      <td>How would you describe your gender?</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please enter your full name below.</td>\n","      <td>Please enter your email address below.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>{\"ImportId\":\"startDate\",\"timeZone\":\"America/De...</td>\n","      <td>{\"ImportId\":\"endDate\",\"timeZone\":\"America/Denv...</td>\n","      <td>{\"ImportId\":\"status\"}</td>\n","      <td>{\"ImportId\":\"ipAddress\"}</td>\n","      <td>{\"ImportId\":\"progress\"}</td>\n","      <td>{\"ImportId\":\"duration\"}</td>\n","      <td>{\"ImportId\":\"finished\"}</td>\n","      <td>{\"ImportId\":\"recordedDate\",\"timeZone\":\"America...</td>\n","      <td>{\"ImportId\":\"_recordId\"}</td>\n","      <td>{\"ImportId\":\"recipientLastName\"}</td>\n","      <td>...</td>\n","      <td>{\"ImportId\":\"QID26_5_TEXT\"}</td>\n","      <td>{\"ImportId\":\"QID29\"}</td>\n","      <td>{\"ImportId\":\"QID32\"}</td>\n","      <td>{\"ImportId\":\"QID33_1\"}</td>\n","      <td>{\"ImportId\":\"QID33_2\"}</td>\n","      <td>{\"ImportId\":\"QID33_3\"}</td>\n","      <td>{\"ImportId\":\"QID33_4\"}</td>\n","      <td>{\"ImportId\":\"QID33_5\"}</td>\n","      <td>{\"ImportId\":\"QID30_TEXT\"}</td>\n","      <td>{\"ImportId\":\"QID31_TEXT\"}</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2024-02-23 17:00:34</td>\n","      <td>2024-02-23 17:01:13</td>\n","      <td>Survey Preview</td>\n","      <td>NaN</td>\n","      <td>100</td>\n","      <td>39</td>\n","      <td>True</td>\n","      <td>2024-02-23 17:01:14</td>\n","      <td>R_6rqPAbYtnYUoXy3</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2024-02-23 17:03:06</td>\n","      <td>2024-02-23 17:03:29</td>\n","      <td>Survey Preview</td>\n","      <td>NaN</td>\n","      <td>100</td>\n","      <td>23</td>\n","      <td>True</td>\n","      <td>2024-02-23 17:03:30</td>\n","      <td>R_6QdUvRWgstydyIV</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2024-02-23 17:04:38</td>\n","      <td>2024-02-23 17:04:54</td>\n","      <td>Survey Preview</td>\n","      <td>NaN</td>\n","      <td>100</td>\n","      <td>16</td>\n","      <td>True</td>\n","      <td>2024-02-23 17:04:55</td>\n","      <td>R_5HnRvA2gTVOw8tw</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 40 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-02476347-a5ff-4201-a0b1-745b7d60f129')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-02476347-a5ff-4201-a0b1-745b7d60f129 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-02476347-a5ff-4201-a0b1-745b7d60f129');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8e98aae6-fbf3-4bc8-b0d9-75db3eca3ba6\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8e98aae6-fbf3-4bc8-b0d9-75db3eca3ba6')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8e98aae6-fbf3-4bc8-b0d9-75db3eca3ba6 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":1}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')\n","\n","# import necessary packages\n","import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import geopandas as gpd\n","from shapely.geometry import Point\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","\n","\n","# read the data\n","df = pd.read_csv('/content/drive/MyDrive/BA830_Comment Survey_March 2, 2024_13.22.csv')\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"VwLgPiGYhFZ9"},"source":["## Cleaning"]},{"cell_type":"markdown","metadata":{"id":"N70LhARIJsSM"},"source":["Drop unnecessary columns."]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":307},"executionInfo":{"elapsed":20,"status":"ok","timestamp":1709852492500,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"bZ8qrnkJ1wzG","outputId":"13f4ba95-eb4f-45d4-ce8d-de4fbd56b9d2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                           StartDate  \\\n","0                                         Start Date   \n","1  {\"ImportId\":\"startDate\",\"timeZone\":\"America/De...   \n","2                                2024-02-23 17:00:34   \n","3                                2024-02-23 17:03:06   \n","4                                2024-02-23 17:04:38   \n","\n","                                             EndDate                 Status  \\\n","0                                           End Date          Response Type   \n","1  {\"ImportId\":\"endDate\",\"timeZone\":\"America/Denv...  {\"ImportId\":\"status\"}   \n","2                                2024-02-23 17:01:13         Survey Preview   \n","3                                2024-02-23 17:03:29         Survey Preview   \n","4                                2024-02-23 17:04:54         Survey Preview   \n","\n","                  LocationLatitude                 LocationLongitude  \\\n","0                Location Latitude                Location Longitude   \n","1  {\"ImportId\":\"locationLatitude\"}  {\"ImportId\":\"locationLongitude\"}   \n","2                          42.3474                          -71.1582   \n","3                          42.3474                          -71.1582   \n","4                          42.3474                          -71.1582   \n","\n","                                                  Q1  \\\n","0  How much do you like the video? Please select ...   \n","1                               {\"ImportId\":\"QID11\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                                  Q2  \\\n","0  How likely would you recommend this video to y...   \n","1                               {\"ImportId\":\"QID12\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                                  Q3  \\\n","0  Among the comments below, which one would you ...   \n","1                               {\"ImportId\":\"QID13\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                             Q4  \\\n","0  What comments would you post for this video?   \n","1                     {\"ImportId\":\"QID14_TEXT\"}   \n","2                                           NaN   \n","3                                           NaN   \n","4                                           NaN   \n","\n","                                                Q1.1  ...  \\\n","0  How much do you like the video? Please select ...  ...   \n","1                               {\"ImportId\":\"QID17\"}  ...   \n","2                                                NaN  ...   \n","3                                                NaN  ...   \n","4                                                NaN  ...   \n","\n","                                           Q1_5_TEXT  \\\n","0  What would be the amount of incentives that yo...   \n","1                        {\"ImportId\":\"QID26_5_TEXT\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                 Q29                                  Q32  \\\n","0  Which age group do you belong to?  How would you describe your gender?   \n","1               {\"ImportId\":\"QID29\"}                 {\"ImportId\":\"QID32\"}   \n","2                                NaN                                  NaN   \n","3                                NaN                                  NaN   \n","4                                NaN                                  NaN   \n","\n","                                               Q33_1  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_1\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                               Q33_2  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_2\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                               Q33_3  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_3\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                               Q33_4  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_4\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                                               Q33_5  \\\n","0  Please rate your preference for each of the fo...   \n","1                             {\"ImportId\":\"QID33_5\"}   \n","2                                                NaN   \n","3                                                NaN   \n","4                                                NaN   \n","\n","                    Outro_Incentive 1                       Outro_Incentive 2  \n","0  Please enter your full name below.  Please enter your email address below.  \n","1           {\"ImportId\":\"QID30_TEXT\"}               {\"ImportId\":\"QID31_TEXT\"}  \n","2                                 NaN                                     NaN  \n","3                                 NaN                                     NaN  \n","4                                 NaN                                     NaN  \n","\n","[5 rows x 28 columns]"],"text/html":["\n","  <div id=\"df-7e592216-c7ed-43e8-ad19-84888e037396\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>StartDate</th>\n","      <th>EndDate</th>\n","      <th>Status</th>\n","      <th>LocationLatitude</th>\n","      <th>LocationLongitude</th>\n","      <th>Q1</th>\n","      <th>Q2</th>\n","      <th>Q3</th>\n","      <th>Q4</th>\n","      <th>Q1.1</th>\n","      <th>...</th>\n","      <th>Q1_5_TEXT</th>\n","      <th>Q29</th>\n","      <th>Q32</th>\n","      <th>Q33_1</th>\n","      <th>Q33_2</th>\n","      <th>Q33_3</th>\n","      <th>Q33_4</th>\n","      <th>Q33_5</th>\n","      <th>Outro_Incentive 1</th>\n","      <th>Outro_Incentive 2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Start Date</td>\n","      <td>End Date</td>\n","      <td>Response Type</td>\n","      <td>Location Latitude</td>\n","      <td>Location Longitude</td>\n","      <td>How much do you like the video? Please select ...</td>\n","      <td>How likely would you recommend this video to y...</td>\n","      <td>Among the comments below, which one would you ...</td>\n","      <td>What comments would you post for this video?</td>\n","      <td>How much do you like the video? Please select ...</td>\n","      <td>...</td>\n","      <td>What would be the amount of incentives that yo...</td>\n","      <td>Which age group do you belong to?</td>\n","      <td>How would you describe your gender?</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please rate your preference for each of the fo...</td>\n","      <td>Please enter your full name below.</td>\n","      <td>Please enter your email address below.</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>{\"ImportId\":\"startDate\",\"timeZone\":\"America/De...</td>\n","      <td>{\"ImportId\":\"endDate\",\"timeZone\":\"America/Denv...</td>\n","      <td>{\"ImportId\":\"status\"}</td>\n","      <td>{\"ImportId\":\"locationLatitude\"}</td>\n","      <td>{\"ImportId\":\"locationLongitude\"}</td>\n","      <td>{\"ImportId\":\"QID11\"}</td>\n","      <td>{\"ImportId\":\"QID12\"}</td>\n","      <td>{\"ImportId\":\"QID13\"}</td>\n","      <td>{\"ImportId\":\"QID14_TEXT\"}</td>\n","      <td>{\"ImportId\":\"QID17\"}</td>\n","      <td>...</td>\n","      <td>{\"ImportId\":\"QID26_5_TEXT\"}</td>\n","      <td>{\"ImportId\":\"QID29\"}</td>\n","      <td>{\"ImportId\":\"QID32\"}</td>\n","      <td>{\"ImportId\":\"QID33_1\"}</td>\n","      <td>{\"ImportId\":\"QID33_2\"}</td>\n","      <td>{\"ImportId\":\"QID33_3\"}</td>\n","      <td>{\"ImportId\":\"QID33_4\"}</td>\n","      <td>{\"ImportId\":\"QID33_5\"}</td>\n","      <td>{\"ImportId\":\"QID30_TEXT\"}</td>\n","      <td>{\"ImportId\":\"QID31_TEXT\"}</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2024-02-23 17:00:34</td>\n","      <td>2024-02-23 17:01:13</td>\n","      <td>Survey Preview</td>\n","      <td>42.3474</td>\n","      <td>-71.1582</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2024-02-23 17:03:06</td>\n","      <td>2024-02-23 17:03:29</td>\n","      <td>Survey Preview</td>\n","      <td>42.3474</td>\n","      <td>-71.1582</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2024-02-23 17:04:38</td>\n","      <td>2024-02-23 17:04:54</td>\n","      <td>Survey Preview</td>\n","      <td>42.3474</td>\n","      <td>-71.1582</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 28 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e592216-c7ed-43e8-ad19-84888e037396')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7e592216-c7ed-43e8-ad19-84888e037396 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7e592216-c7ed-43e8-ad19-84888e037396');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-52fb84e7-24da-4796-a573-213603c7c7c5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-52fb84e7-24da-4796-a573-213603c7c7c5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-52fb84e7-24da-4796-a573-213603c7c7c5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":2}],"source":["df = df.drop(['IPAddress', 'Progress', 'Duration (in seconds)', 'Finished', 'ResponseId', 'RecipientLastName', 'RecipientFirstName', 'RecipientEmail', 'ExternalReference', 'UserLanguage', 'DistributionChannel', 'RecordedDate'], axis = 1)\n","df.head()"]},{"cell_type":"markdown","metadata":{"id":"WlrBNoP2J6Ya"},"source":["Continue to drop the data that we do not need."]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":947},"executionInfo":{"elapsed":17,"status":"ok","timestamp":1709852492500,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"qqznCNjW2knd","outputId":"afddb3e0-e39f-4b4c-9be5-fe93d729960f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["               StartDate              EndDate LocationLatitude  \\\n","0    2024-02-24 13:35:27  2024-02-24 13:39:17           40.694   \n","1    2024-02-24 17:20:54  2024-02-24 17:27:05          51.5245   \n","2    2024-02-24 20:21:41  2024-02-24 20:23:24          22.3361   \n","3    2024-02-24 21:00:21  2024-02-24 21:05:32           24.144   \n","4    2024-02-24 13:44:14  2024-02-25 11:12:54          42.3973   \n","..                   ...                  ...              ...   \n","110  2024-02-27 23:54:11  2024-02-28 08:06:21          22.2842   \n","111  2024-02-28 12:12:34  2024-02-28 12:16:07          42.3464   \n","112  2024-02-28 16:50:35  2024-02-28 16:51:53          38.9034   \n","113  2024-02-29 04:54:50  2024-02-29 04:55:47          26.0492   \n","114  2024-03-01 21:35:25  2024-03-01 21:37:51          42.3634   \n","\n","    LocationLongitude                           Q1  \\\n","0            -73.9901                          NaN   \n","1             -0.1567                          NaN   \n","2            114.1999                   3. Neutral   \n","3            120.6844                          NaN   \n","4            -71.0372  2. I do not like this video   \n","..                ...                          ...   \n","110          114.1759                          NaN   \n","111          -71.0975                          NaN   \n","112          -76.9882                          NaN   \n","113          119.2906         1. I hate this video   \n","114          -71.0713                   3. Neutral   \n","\n","                                 Q2  \\\n","0                               NaN   \n","1                               NaN   \n","2              2. Somewhat unlikely   \n","3                               NaN   \n","4             1. Extremely unlikely   \n","..                              ...   \n","110                             NaN   \n","111                             NaN   \n","112                             NaN   \n","113            2. Somewhat unlikely   \n","114  3. Neither likely nor unlikely   \n","\n","                                              Q3  \\\n","0                                            NaN   \n","1                                            NaN   \n","2    This video promotes inappropriate messages.   \n","3                                            NaN   \n","4          This video is an ordinary commercial.   \n","..                                           ...   \n","110                                          NaN   \n","111                                          NaN   \n","112                                          NaN   \n","113        This video encourages me to keep fit.   \n","114        This video encourages me to keep fit.   \n","\n","                                                    Q4  \\\n","0                                                  NaN   \n","1                                                  NaN   \n","2          Makes use of inappropriate cultural beliefs   \n","3                                                  NaN   \n","4    I don’t like the beauty ideal promoted by the ...   \n","..                                                 ...   \n","110                                                NaN   \n","111                                                NaN   \n","112                                                NaN   \n","113                                                NaN   \n","114                                              Cool    \n","\n","                              Q1.1                            Q2.1  ...  \\\n","0                              NaN                             NaN  ...   \n","1                              NaN                             NaN  ...   \n","2                              NaN                             NaN  ...   \n","3                       3. Neutral  3. Neither likely nor unlikely  ...   \n","4                              NaN                             NaN  ...   \n","..                             ...                             ...  ...   \n","110  4. I think this video is okay            2. Somewhat unlikely  ...   \n","111                            NaN                             NaN  ...   \n","112                            NaN                             NaN  ...   \n","113                            NaN                             NaN  ...   \n","114                            NaN                             NaN  ...   \n","\n","    Q1_5_TEXT    Q29     Q32 Q33_1 Q33_2 Q33_3 Q33_4 Q33_5 Outro_Incentive 1  \\\n","0         NaN  18-24  Female     3     1     5     4     2     Victoria Wang   \n","1         NaN  18-24  Female     1     4     4     4     1       Cherry Wong   \n","2         NaN  18-24  Female     1     2     4     4     1               NaN   \n","3         NaN  18-24  Female     4     2     5     4     5               NaN   \n","4         NaN  18-24  Female     3     1     4     4     4               NaN   \n","..        ...    ...     ...   ...   ...   ...   ...   ...               ...   \n","110       NaN  18-24  Female     3     3     4     5     2               NaN   \n","111       NaN  18-24  Female     1     1     1     1     1               NaN   \n","112       NaN  18-24    Male     1     1     4     5     2               NaN   \n","113       NaN  18-24    Male     5     5     5     5     5               NaN   \n","114       NaN  25-34  Female     1     1     3     3     1               NaN   \n","\n","           Outro_Incentive 2  \n","0    vicwang1025@hotmail.com  \n","1     tsz.wong.23@ucl.ac.uk   \n","2                        NaN  \n","3                        NaN  \n","4                        NaN  \n","..                       ...  \n","110                      NaN  \n","111                      NaN  \n","112                      NaN  \n","113                      NaN  \n","114                      NaN  \n","\n","[115 rows x 27 columns]"],"text/html":["\n","  <div id=\"df-1cfb4d6d-8146-4c25-a1bf-ddc082774380\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>StartDate</th>\n","      <th>EndDate</th>\n","      <th>LocationLatitude</th>\n","      <th>LocationLongitude</th>\n","      <th>Q1</th>\n","      <th>Q2</th>\n","      <th>Q3</th>\n","      <th>Q4</th>\n","      <th>Q1.1</th>\n","      <th>Q2.1</th>\n","      <th>...</th>\n","      <th>Q1_5_TEXT</th>\n","      <th>Q29</th>\n","      <th>Q32</th>\n","      <th>Q33_1</th>\n","      <th>Q33_2</th>\n","      <th>Q33_3</th>\n","      <th>Q33_4</th>\n","      <th>Q33_5</th>\n","      <th>Outro_Incentive 1</th>\n","      <th>Outro_Incentive 2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2024-02-24 13:35:27</td>\n","      <td>2024-02-24 13:39:17</td>\n","      <td>40.694</td>\n","      <td>-73.9901</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>Victoria Wang</td>\n","      <td>vicwang1025@hotmail.com</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2024-02-24 17:20:54</td>\n","      <td>2024-02-24 17:27:05</td>\n","      <td>51.5245</td>\n","      <td>-0.1567</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>Cherry Wong</td>\n","      <td>tsz.wong.23@ucl.ac.uk</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2024-02-24 20:21:41</td>\n","      <td>2024-02-24 20:23:24</td>\n","      <td>22.3361</td>\n","      <td>114.1999</td>\n","      <td>3. Neutral</td>\n","      <td>2. Somewhat unlikely</td>\n","      <td>This video promotes inappropriate messages.</td>\n","      <td>Makes use of inappropriate cultural beliefs</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2024-02-24 21:00:21</td>\n","      <td>2024-02-24 21:05:32</td>\n","      <td>24.144</td>\n","      <td>120.6844</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>3. Neutral</td>\n","      <td>3. Neither likely nor unlikely</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>5</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2024-02-24 13:44:14</td>\n","      <td>2024-02-25 11:12:54</td>\n","      <td>42.3973</td>\n","      <td>-71.0372</td>\n","      <td>2. I do not like this video</td>\n","      <td>1. Extremely unlikely</td>\n","      <td>This video is an ordinary commercial.</td>\n","      <td>I don’t like the beauty ideal promoted by the ...</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>110</th>\n","      <td>2024-02-27 23:54:11</td>\n","      <td>2024-02-28 08:06:21</td>\n","      <td>22.2842</td>\n","      <td>114.1759</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>4. I think this video is okay</td>\n","      <td>2. Somewhat unlikely</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>111</th>\n","      <td>2024-02-28 12:12:34</td>\n","      <td>2024-02-28 12:16:07</td>\n","      <td>42.3464</td>\n","      <td>-71.0975</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>112</th>\n","      <td>2024-02-28 16:50:35</td>\n","      <td>2024-02-28 16:51:53</td>\n","      <td>38.9034</td>\n","      <td>-76.9882</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Male</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>113</th>\n","      <td>2024-02-29 04:54:50</td>\n","      <td>2024-02-29 04:55:47</td>\n","      <td>26.0492</td>\n","      <td>119.2906</td>\n","      <td>1. I hate this video</td>\n","      <td>2. Somewhat unlikely</td>\n","      <td>This video encourages me to keep fit.</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Male</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>114</th>\n","      <td>2024-03-01 21:35:25</td>\n","      <td>2024-03-01 21:37:51</td>\n","      <td>42.3634</td>\n","      <td>-71.0713</td>\n","      <td>3. Neutral</td>\n","      <td>3. Neither likely nor unlikely</td>\n","      <td>This video encourages me to keep fit.</td>\n","      <td>Cool</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>...</td>\n","      <td>NaN</td>\n","      <td>25-34</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>115 rows × 27 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1cfb4d6d-8146-4c25-a1bf-ddc082774380')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1cfb4d6d-8146-4c25-a1bf-ddc082774380 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1cfb4d6d-8146-4c25-a1bf-ddc082774380');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-68f13eea-b769-4328-b4c2-e55bff0ecf41\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-68f13eea-b769-4328-b4c2-e55bff0ecf41')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-68f13eea-b769-4328-b4c2-e55bff0ecf41 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":3}],"source":["# filter out the preview data\n","df = df[df['Status'] != 'Survey Preview'].reset_index(drop = True)\n","\n","# drop the rows we do not need\n","df = df.drop([0, 1]).reset_index(drop = True)\n","\n","# drop the unnecessary column\n","df = df.drop(columns = 'Status', axis = 1)\n","df"]},{"cell_type":"code","execution_count":4,"metadata":{"id":"9mXY67J_JYh7","executionInfo":{"status":"ok","timestamp":1709852492501,"user_tz":300,"elapsed":17,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["df['LocationLatitude'] = df['LocationLatitude'].astype(float)\n","df['LocationLongitude'] = df['LocationLongitude'].astype(float)"]},{"cell_type":"markdown","metadata":{"id":"hr-8JtFtKkdB"},"source":["Create new dataframes for each treatment group."]},{"cell_type":"markdown","metadata":{"id":"1xQ5PAReKnrx"},"source":["Control group:"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":16,"status":"ok","timestamp":1709852492501,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"9lnGdRX45bjI","outputId":"233371b9-d889-4404-c22a-adf3ba95f49f"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 43 entries, 2 to 114\n","Data columns (total 14 columns):\n"," #   Column                Non-Null Count  Dtype \n","---  ------                --------------  ----- \n"," 0   StartDate             43 non-null     object\n"," 1   EndDate               43 non-null     object\n"," 2   Q1                    43 non-null     object\n"," 3   Q2                    43 non-null     object\n"," 4   Q3                    42 non-null     object\n"," 5   Q4                    21 non-null     object\n"," 6   Age                   43 non-null     object\n"," 7   Gender                43 non-null     object\n"," 8   TikTok preference     43 non-null     object\n"," 9   Facebook preference   43 non-null     object\n"," 10  Instagram preference  43 non-null     object\n"," 11  Youtube preference    43 non-null     object\n"," 12  X preference          43 non-null     object\n"," 13  Treatment             43 non-null     int64 \n","dtypes: int64(1), object(13)\n","memory usage: 5.0+ KB\n"]}],"source":["# keep the rows that have data for Q1\n","treat_0 = df.dropna(subset=['Q1'])\n","treat_0 = treat_0[['StartDate', 'EndDate', 'Q1', 'Q2', 'Q3', 'Q4', 'Q29', 'Q32', 'Q33_1', 'Q33_2', 'Q33_3', 'Q33_4', 'Q33_5']]\n","\n","# rename the columns\n","column = {'Q29': 'Age', 'Q32': 'Gender', 'Q33_1': 'TikTok preference', 'Q33_2': 'Facebook preference', 'Q33_3': 'Instagram preference', 'Q33_4': 'Youtube preference', 'Q33_5': 'X preference'}\n","treat_0.rename(columns =column, inplace=True)\n","treat_0['Treatment'] = 0\n","\n","treat_0.info()"]},{"cell_type":"markdown","metadata":{"id":"I4l46WfmK9x9"},"source":["Treatment group 1 (nonanonymous group):"]},{"cell_type":"code","execution_count":6,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":14,"status":"ok","timestamp":1709852492501,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"aIp_p8kp7vEv","outputId":"badc82d9-03cd-4eb6-ad06-9af0f759f1dd"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 39 entries, 3 to 110\n","Data columns (total 14 columns):\n"," #   Column                Non-Null Count  Dtype \n","---  ------                --------------  ----- \n"," 0   StartDate             39 non-null     object\n"," 1   EndDate               39 non-null     object\n"," 2   Q1                    39 non-null     object\n"," 3   Q2                    39 non-null     object\n"," 4   Q3                    38 non-null     object\n"," 5   Q4                    22 non-null     object\n"," 6   Age                   39 non-null     object\n"," 7   Gender                39 non-null     object\n"," 8   TikTok preference     39 non-null     object\n"," 9   Facebook preference   39 non-null     object\n"," 10  Instagram preference  39 non-null     object\n"," 11  Youtube preference    39 non-null     object\n"," 12  X preference          39 non-null     object\n"," 13  Treatment             39 non-null     int64 \n","dtypes: int64(1), object(13)\n","memory usage: 4.6+ KB\n"]}],"source":["# keep the rows that have data for Q1.1\n","treat_1 = df.dropna(subset=['Q1.1'])\n","treat_1 = treat_1[['StartDate', 'EndDate', 'Q1.1', 'Q2.1', 'Q3.1', 'Q4.1', 'Q29', 'Q32', 'Q33_1', 'Q33_2', 'Q33_3', 'Q33_4', 'Q33_5']]\n","\n","# rename the columns\n","column_1 = {'Q1.1': 'Q1', 'Q2.1': 'Q2', 'Q3.1': 'Q3', 'Q4.1': 'Q4', 'Q29': 'Age', 'Q32': 'Gender', 'Q33_1': 'TikTok preference', 'Q33_2': 'Facebook preference', 'Q33_3': 'Instagram preference', 'Q33_4': 'Youtube preference', 'Q33_5': 'X preference'}\n","treat_1.rename(columns =column_1, inplace=True)\n","treat_1['Treatment'] = 1\n","\n","treat_1.info()"]},{"cell_type":"markdown","metadata":{"id":"J16rFUiiLG87"},"source":["Treatment group 2 (nonanonymous with incentives):"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1709852492501,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"JpwxYqr18IT7","outputId":"6623d038-ed6e-47b3-d4a9-6c6934a8432a"},"outputs":[{"output_type":"stream","name":"stdout","text":["<class 'pandas.core.frame.DataFrame'>\n","Int64Index: 33 entries, 0 to 112\n","Data columns (total 16 columns):\n"," #   Column                Non-Null Count  Dtype \n","---  ------                --------------  ----- \n"," 0   StartDate             33 non-null     object\n"," 1   EndDate               33 non-null     object\n"," 2   Q1                    33 non-null     object\n"," 3   Q2                    33 non-null     object\n"," 4   Q3                    32 non-null     object\n"," 5   Q4                    16 non-null     object\n"," 6   Incentive             17 non-null     object\n"," 7   Incentive_other       0 non-null      object\n"," 8   Age                   33 non-null     object\n"," 9   Gender                33 non-null     object\n"," 10  TikTok preference     33 non-null     object\n"," 11  Facebook preference   33 non-null     object\n"," 12  Instagram preference  33 non-null     object\n"," 13  Youtube preference    33 non-null     object\n"," 14  X preference          33 non-null     object\n"," 15  Treatment             33 non-null     int64 \n","dtypes: int64(1), object(15)\n","memory usage: 4.4+ KB\n"]}],"source":["# keep the rows that have data for Q1.2\n","treat_2 = df.dropna(subset=['Q1.2'])\n","treat_2 = treat_2[['StartDate', 'EndDate', 'Q1.2', 'Q2.2', 'Q3.2', 'Q4.2', 'Q1.3', 'Q1_5_TEXT', 'Q29', 'Q32', 'Q33_1', 'Q33_2', 'Q33_3', 'Q33_4', 'Q33_5']]\n","\n","# rename the columns\n","column_2 = {'Q1.2': 'Q1', 'Q2.2': 'Q2', 'Q3.2': 'Q3', 'Q4.2': 'Q4', 'Q1.3': 'Incentive', 'Q1_5_TEXT': 'Incentive_other', 'Q29': 'Age', 'Q32': 'Gender', 'Q33_1': 'TikTok preference', 'Q33_2': 'Facebook preference', 'Q33_3': 'Instagram preference', 'Q33_4': 'Youtube preference', 'Q33_5': 'X preference'}\n","treat_2.rename(columns =column_2, inplace=True)\n","treat_2['Treatment'] = 2\n","\n","treat_2.info()"]},{"cell_type":"markdown","metadata":{"id":"Ml8LF7ZxLVSY"},"source":["Cleaned total data:"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"executionInfo":{"elapsed":10,"status":"ok","timestamp":1709852492501,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"fM_x_ZG4Ac_3","outputId":"23cec203-5049-463f-f7fb-1bbb13d98a9a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              StartDate              EndDate                             Q1  \\\n","2   2024-02-24 20:21:41  2024-02-24 20:23:24                     3. Neutral   \n","4   2024-02-24 13:44:14  2024-02-25 11:12:54    2. I do not like this video   \n","5   2024-02-25 12:49:30  2024-02-25 12:51:56  4. I think this video is okay   \n","8   2024-02-26 16:28:06  2024-02-26 16:30:25    2. I do not like this video   \n","11  2024-02-26 16:29:07  2024-02-26 16:33:01  4. I think this video is okay   \n","\n","                                Q2  \\\n","2             2. Somewhat unlikely   \n","4            1. Extremely unlikely   \n","5             2. Somewhat unlikely   \n","8            1. Extremely unlikely   \n","11  3. Neither likely nor unlikely   \n","\n","                                             Q3  \\\n","2   This video promotes inappropriate messages.   \n","4         This video is an ordinary commercial.   \n","5         This video is an ordinary commercial.   \n","8         This video is an ordinary commercial.   \n","11            This video is a great commercial.   \n","\n","                                                   Q4    Age  Gender  \\\n","2         Makes use of inappropriate cultural beliefs  18-24  Female   \n","4   I don’t like the beauty ideal promoted by the ...  18-24  Female   \n","5                                                 NaN  25-34  Female   \n","8                                                 NaN  18-24    Male   \n","11  Why only slim girls? I like this commercial bu...  18-24    Male   \n","\n","   TikTok preference Facebook preference Instagram preference  \\\n","2                  1                   2                    4   \n","4                  3                   1                    4   \n","5                  1                   3                    5   \n","8                  1                   1                    1   \n","11                 1                   2                    3   \n","\n","   Youtube preference X preference  Treatment Incentive Incentive_other  \n","2                   4            1          0       NaN             NaN  \n","4                   4            4          0       NaN             NaN  \n","5                   5            2          0       NaN             NaN  \n","8                   1            1          0       NaN             NaN  \n","11                  5            5          0       NaN             NaN  "],"text/html":["\n","  <div id=\"df-af7d6e44-d4ff-471d-ba3c-61351128c864\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>StartDate</th>\n","      <th>EndDate</th>\n","      <th>Q1</th>\n","      <th>Q2</th>\n","      <th>Q3</th>\n","      <th>Q4</th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>TikTok preference</th>\n","      <th>Facebook preference</th>\n","      <th>Instagram preference</th>\n","      <th>Youtube preference</th>\n","      <th>X preference</th>\n","      <th>Treatment</th>\n","      <th>Incentive</th>\n","      <th>Incentive_other</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>2024-02-24 20:21:41</td>\n","      <td>2024-02-24 20:23:24</td>\n","      <td>3. Neutral</td>\n","      <td>2. Somewhat unlikely</td>\n","      <td>This video promotes inappropriate messages.</td>\n","      <td>Makes use of inappropriate cultural beliefs</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2024-02-24 13:44:14</td>\n","      <td>2024-02-25 11:12:54</td>\n","      <td>2. I do not like this video</td>\n","      <td>1. Extremely unlikely</td>\n","      <td>This video is an ordinary commercial.</td>\n","      <td>I don’t like the beauty ideal promoted by the ...</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2024-02-25 12:49:30</td>\n","      <td>2024-02-25 12:51:56</td>\n","      <td>4. I think this video is okay</td>\n","      <td>2. Somewhat unlikely</td>\n","      <td>This video is an ordinary commercial.</td>\n","      <td>NaN</td>\n","      <td>25-34</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>2024-02-26 16:28:06</td>\n","      <td>2024-02-26 16:30:25</td>\n","      <td>2. I do not like this video</td>\n","      <td>1. Extremely unlikely</td>\n","      <td>This video is an ordinary commercial.</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Male</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>2024-02-26 16:29:07</td>\n","      <td>2024-02-26 16:33:01</td>\n","      <td>4. I think this video is okay</td>\n","      <td>3. Neither likely nor unlikely</td>\n","      <td>This video is a great commercial.</td>\n","      <td>Why only slim girls? I like this commercial bu...</td>\n","      <td>18-24</td>\n","      <td>Male</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-af7d6e44-d4ff-471d-ba3c-61351128c864')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-af7d6e44-d4ff-471d-ba3c-61351128c864 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-af7d6e44-d4ff-471d-ba3c-61351128c864');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-b3f878a4-9ed5-4c15-a2d6-478ee04670ae\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b3f878a4-9ed5-4c15-a2d6-478ee04670ae')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-b3f878a4-9ed5-4c15-a2d6-478ee04670ae button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_updated","repr_error":"Out of range float values are not JSON compliant: nan"}},"metadata":{},"execution_count":8}],"source":["# concat the three treatments\n","df_updated = pd.concat([treat_0, treat_1, treat_2], axis=0)\n","df_updated.head()"]},{"cell_type":"markdown","metadata":{"id":"ljYqsxDlLZqq"},"source":["# EDA"]},{"cell_type":"markdown","metadata":{"id":"WCyFchBaJ3g3"},"source":["First, we may look at the locations where our respondents reside, and then look into other variables."]},{"cell_type":"code","execution_count":9,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":478},"executionInfo":{"elapsed":1680,"status":"ok","timestamp":1709852494172,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"QrFb0OjZJplD","outputId":"84717965-b850-4d52-f094-e9bc1c054494"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["geometry = [Point(xy) for xy in zip(df['LocationLongitude'], df['LocationLatitude'])]\n","gdf = gpd.GeoDataFrame(df, geometry = geometry, crs = 'EPSG:4326')\n","\n","# plot the map\n","world = gpd.read_file(gpd.datasets.get_path('naturalearth_lowres'))\n","fig, ax = plt.subplots(figsize = (10, 6))\n","world.plot(ax = ax, color = 'lightgray')\n","\n","# plot the points on the map\n","gdf.plot(ax = ax, marker = 'o', color = 'red', markersize = 10)\n","\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"dJ7LZSzeQUL5"},"source":["## Age by treatment"]},{"cell_type":"code","execution_count":10,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":7,"status":"ok","timestamp":1709852494173,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"V1njd2HmeZXe","outputId":"7c3f17ee-8b8e-49fb-f744-bf4c1ec2d2da"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["18-24       0.817391\n","25-34       0.165217\n","44 +        0.008696\n","Under 18    0.008696\n","Name: Age, dtype: float64"]},"metadata":{},"execution_count":10}],"source":["df_updated['Age'].value_counts()/len(df_updated['Age'])"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":294,"status":"ok","timestamp":1709852494462,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"MS1Yj8CJUIoN","outputId":"0bb273ce-61ab-41ad-d5e9-ebc561a64491"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Age Group by Treatment')"]},"metadata":{},"execution_count":11},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["order = ['Under 18', '18-24', '25-34', '44 +']\n","\n","sns.countplot(x = 'Age', data = df_updated, hue = 'Treatment', order = order)\n","plt.xlabel('Age Group')\n","plt.title('Age Group by Treatment')"]},{"cell_type":"markdown","metadata":{"id":"kWykWhTlQXO2"},"source":["Gender by treatment:"]},{"cell_type":"code","execution_count":12,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":507},"executionInfo":{"elapsed":811,"status":"ok","timestamp":1709852495269,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"KD9omuexJb1K","outputId":"460c00a0-17df-4254-b7a9-37433a924dc0"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x500 with 4 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["fig, axs = plt.subplots(2, 2, figsize=(10, 5))\n","\n","axs[0, 0].bar(df_updated['Gender'].value_counts().index, df_updated['Gender'].value_counts(), color='#aec6cf')\n","axs[0, 0].set_title('All Participants Gender Distribution')\n","axs[0, 0].set_xlabel('Gender')\n","axs[0, 0].set_ylabel('Count')\n","\n","axs[0, 1].bar(treat_0['Gender'].value_counts().index, treat_0['Gender'].value_counts(), color='#aec6cf')\n","axs[0, 1].set_title('Anonymous Group')\n","axs[0, 1].set_xlabel('Gender')\n","axs[0, 1].set_ylabel('Count')\n","\n","axs[1, 0].bar(treat_1['Gender'].value_counts().index, treat_1['Gender'].value_counts(), color='#aec6cf')\n","axs[1, 0].set_title('Nonanonymous Group')\n","axs[1, 0].set_xlabel('Gender')\n","axs[1, 0].set_ylabel('Count')\n","\n","axs[1, 1].bar(treat_2['Gender'].value_counts().index, treat_2['Gender'].value_counts(), color='#aec6cf')\n","axs[1, 1].set_title('Nonanonymous Group with Incentive')\n","axs[1, 1].set_xlabel('Gender')\n","axs[1, 1].set_ylabel('Count')\n","\n","plt.tight_layout()\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"HmQ1TgKrQaWh"},"source":["## Answers by treatment"]},{"cell_type":"code","execution_count":13,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":310,"status":"ok","timestamp":1709852495573,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"TZiHiR8DN27L","outputId":"049a731e-b874-49ce-af3b-a95fb712f59a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Responses to the Video by Treatment')"]},"metadata":{},"execution_count":13},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["g1 = sns.countplot(y = 'Q1', data = df_updated, hue = 'Treatment', order = df_updated['Q1'].sort_values())\n","plt.xlabel('Count')\n","plt.title('Responses to the Video by Treatment')"]},{"cell_type":"code","execution_count":14,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":309,"status":"ok","timestamp":1709852495878,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"EKxM5jxyQuSe","outputId":"2de99966-abd3-4b5f-b35f-c2c6fc47fae2"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Tendency to Recommend the Video by Treatment')"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["g2 = sns.countplot(y = 'Q2', data = df_updated, hue = 'Treatment', order = df_updated['Q2'].sort_values())\n","plt.xlabel('Count')\n","plt.title('Tendency to Recommend the Video by Treatment')"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":489},"executionInfo":{"elapsed":432,"status":"ok","timestamp":1709852496308,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"ybG_yzK9Q2Tq","outputId":"d8e950fd-6d56-4310-ca43-3cd104e629b7"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 1.0, 'Opinions About the Video by Treatment')"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"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Plv5+flIT09Ho0aNPsj5FD4WFbVjyd/vZ8+eiR005eFfdyJSmLVr16J169aoXbs2YmJisGzZsn89TJSIiIiIPh5MSIlIYVJTU/Hjjz/iyZMnaNCgASZPnozp06crOiwiIiIiek+YkBKRwqxYsQIrVqxQdBifPd65QURERIrCSY2IiIiIiIhIIZiQEhERERERkUJwyC4REREREdFbyL6e+N72Zdjc9q22W7NmDZYtW4b79+/D1tYWq1atQps2bd5xdG+PPaRERERERESfoIiICEyaNAmzZ8/G5cuXYWtrC1dXV2RnZys6NBETUiIiIiIiok/Q8uXLMWrUKAwfPhxWVlZYv349NDQ08PPPPys6NBETUiIiIiIiok/MixcvEB8fj86dO4vLatSogc6dOyM2NlaBkcliQkpERERERPSJefToEYqKimBkZCSz3MjICPfv31dQVPKYkBIREREREZFCMCElIiIiIiL6xOjr60NJSQkPHjyQWf7gwQMYGxsrKCp5fOwLERF98GITo6Ctra3oMIiIiD4aKioqaNWqFY4fPw53d3cAQHFxMY4fP45x48YpNrjXMCElIiIiIiL6BE2aNAnDhg2Dg4MD2rRpg+DgYDx//hzDhw9XdGgiJqRERERERESfoIEDB+Lhw4eYNWsW7t+/j5YtWyIyMlJuoiNFYkJKRERERET0Fgyb2yo6hEqNGzfugxqiWxonNSIiIiIiIiKFYEJKRERERERECsGElIiIiIiIiBSCCSkREREREREpBBNSIiIiIiIiUgjOsktERB+8h8lXkS+VKjoMog/axzDbJxFRaewhJSIiIiIiIoVgQkpEREREREQKwYSUiIiIiIiIFIIJKRERERERESkEJzUiIiIiIiJ6C1v8l7+3fXkHT3rjbU6fPo1ly5YhPj4eWVlZ2LNnD9zd3d99cP8Ce0iJiIiIiIg+Qc+fP4etrS3WrFmj6FDKxR5SIiIiIiKiT1D37t3RvXt3RYdRIfaQEhERERERkUIwISUiIiIiIiKFYEJKRERERERECsGElIiIiIiIiBSCkxoREdEH71jYKairqik6DKIPmnewraJDICJ6Yx90D2l0dDQkEgmePn1abpk5c+agZcuW1RaDqakpgoODKywjkUiwd+/eaosBAARBgK+vL/T09CCRSJCQkFCt+/tQVKX9FcnHx0fmWU5ve57+zTWU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/PwwadIkTJ48GdbW1oiMjMT+/fthbm7+1sdua2uL5cuXY8mSJWjRogW2bduGRYsWyZQpKirC2LFjYWlpiW7dusHCwkJmMp/XGRgYICwsDL/++iusrKywePFiBAYGvnV8/8by5ctRq1YtODo6onfv3nB1dYW9vb1cucmTJ+PSpUuws7PDjz/+iOXLl8PV1VWmzNy5c7Fjxw7Y2Nhgy5Yt2L59e6U901U9X4sXL8bixYtha2uLs2fPYv/+/dDX13+jY/3pp5/w119/wd7eHkOHDoWfnx8MDQ1lygQFBSEqKgomJiaws7MDALi6uuLAgQM4evQoWrdujS+//BIrVqxAw4YNy93XqFGj0LRpUzg4OMDAwECuFxgA6tWrJ06YZGRkVG7yHhoaCm9vb0yePBlNmzaFu7s74uLixM9TYWEhUlJSqv1+ViIiIvo4SITXn3NBRPSRMzU1hb+/v8xMw6VJJBLs2bMH7u7u73TfGRkZaNSoEa5cuSLzTFF6ezk5OdDR0cH6bxdAXbV674GtjHfwJIXun4iI6GNR8vf72bNnld5+w8e+EBHRB29l5D4o1VDsn6zA//2m0P2TvKQ0+d58IiL6uHDILhERERERESkEe0iJ6JNS1qy7pVXXnQqmpqbVVjcRERHRp4g9pERERERERKQQTEiJiIiIiIhIIZiQEhERERERkUIwISUiIiIiIiKFYEJKRERERERECsGElIiIiIiIiBSCCSkREREREREpBBNSIiIiIiIiUggmpERERERERKQQyooOgIiIqDKxiVHQ1tZWdBhERET0jrGHlIiIiIiIiBSCCSkREREREREpBBNSIiIiIiIiUggmpERERERERKQQTEiJiIiIiIhIIZiQEhERERERkUIwISUiIiIiIiKFYEJKRERERERECqGs6ACIiIgq8zD5KvKlUkWHQfRBM2xuq+gQiIjeGHtIiYiIiIiISCGYkBIREREREZFCMCElIiIiIiIihWBCSkRERERERArBhJSIiIiIiIgUggkpERERERERKQQTUiIiIiIiIlIIJqRERERERESkEExIiYiIiIiISCGYkBIREREREZFCMCElIiIiIiIihWBCSkRERERERAqhrOgAiIiIKnMs7BTUVdUUHQZRmbyDJyk6BCKijxZ7SIn+v+joaEgkEjx9+rTcMnPmzEHLli2rLQZTU1MEBwdXWEYi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HJKTkzF69GiZmW7LU7NmTYwfPx4XLlxAfHw8fHx88OWXX6JNmzbicYSFhWHdunVITU3F8uXLsXv3bgQEBIjtZW1tDS8vL1y+fBkXL16Et7c3nJ2d4eDgUKVjLTF9+nTExcVhzJgxSEpKws2bN7Fu3To8evQImpqa+M9//oPvvvsOkZGRuHHjBkaNGoW8vDyMGDHijfbzLowdOxZPnjyBp6cn4uLikJaWhiNHjmD48OHiJExlGTduHHJycjBo0CBcunQJqamp2Lp1q8ys0iVq1aqF2rVr47///S9u376NEydOYNKkSZXG1qxZM+zZs+dfHR8RERF9GpiQEr1jGhoauHnzJvr16wcLCwv4+vpi7NixGD16dIXbeXl5ITExEe3atUODBg3KLVejRg3s2bMH//zzD9q0aYORI0diwYIFcjGcPn0aDRo0QN++fWFpaYkRI0YgPz9fHALp5+eHSZMmYfLkybC2tkZkZCT2798Pc3PzKh2nrq4udu/ejY4dO8LS0hLr16/H9u3b0bx58zLL//DDD7C3t4erqytcXFxgbGws8/iQ8mhoaGDq1KkYPHgwnJycIJVKERERIa53d3dHSEgIAgMD0bx5c2zYsAGhoaFwcXEB8Goo6759+1CrVi20b98enTt3hpmZmUwdVWVhYYGjR48iMTERbdq0Qdu2bbFv3z4oK796pPPixYvRr18/DB06FPb29rh9+zaOHDmCWrVqvfG+/q2SHvCioiJ07doV1tbW8Pf3h66uLmrUKP9Xf+3atXHixAnk5ubC2dkZrVq1wsaNG8u8p7RGjRrYsWMH4uPj0aJFC0ycOBHLli2rNLaUlBQ8e/bsXx0fERERfRokgvDasyaIiD4gYWFh8Pf3L/e+VPr05eTkQEdHB8+ePeP9pERERB+JN/n7zR5SIiIiIiIiUggmpERERERERKQQTEiJ6IPl4+PD4bpEREREnzAmpERERERERKQQTEiJiIiIiIhIIZiQEhERERERkUIwISUiIiIiIiKFYEJKRERERERECsGElIiIiIiIiBSCCSkREREREREpBBNSIiIiIiIiUggmpERERERERKQQTEiJiIiIiIhIIZiQEhERERERkUIwISUiIiIiIiKFYEJKRERERERECsGElIiIiIiIiBSCCSkREREREREpBBNSIiIiIiIiUggmpERERERERKQQTEiJiIiI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ixf17LPPGl3aLRcREaG1a9fq008/lZOTk+WaLxcXF9WvX9/g6m4tJyenMtfOOjg4qFGjRnfcNbVjx45V165dNWvWLA0ePFj79u3T8uXLtXz5cqNLM0S/fv00c+ZMNW/eXO3atdPBgwe1YMECPffcc0aXdksUFBTo+PHjlvtZWVlKTU2Vm5ubmjdvrjFjxugf//iHfH191aJFC0VFRcnT01MDBgwwruibpLK+8PDw0F/+8helpKRoy5YtKioqsnymurm5yc7Ozqiyb5qqjo1rA3ndunXl7u6uNm3a3JoCb9l8vgAA1NDixYvNzZs3N9vZ2Zk7d+5s3rt3r9ElGUJSubcVK1YYXVqtcKd+7YvZbDb/61//Mrdv395sb29vbtu2rXn58uVGl2SY/Px88+jRo83Nmzc316tXz9yyZUvz1KlTzb/++qvRpd0SX331VbmfEyNGjDCbzVe/+iUqKsrcrFkzs729vblXr17mjIwMY4u+SSrri6ysrAo/U7/66iujS78pqjo2rnWrv/bFZDabzbcm+gIAAAAA8DuuIQUAAAAAGIJACgAAAAAwBIEUAAAAAGAIAikAAAAAwBAEUgAAAACAIQikAAAAAABDEEgBAAAAAIYgkAIAAAAADEEgBQAAQI2dOnVKr7zyilq2bCl7e3t5eXmpX79+io+Pv6V1mEwmbdq06ZZuE8CNY2t0AQAAALi9ZGdnKyQkRK6urnrrrbcUEBCgwsJCff7554qIiNDRo0eNLhHAbcJkNpvNRhcBAACA20efPn106NAhZWRkyMHBweq5c+fOydXVVbm5uXrllVcUHx8vGxsbPfroo1q8eLGaNWsmSRo5cqTOnTtnNbo5ZswYpaamKiEhQZLUo0cPBQYGql69evrwww9lZ2enl19+WW+88YYkycfHRzk5OZblvb29lZ2dfTN3HcANxim7AAAAqLZffvlFW7duVURERJkwKkmurq4qLi5W//799csvv2j79u2Ki4vTt99+q7/+9a813t6qVavk4OCgpKQkzZ07V9OnT1dcXJwkaf/+/ZKkFStW6OTJk5b7AG4fnLILAACAajt+/LjMZrPatm1bYZv4+Hh9/fXXysrKkpeXlyRp9erVateunfbv369OnTpVe3uBgYF6/fXXJUm+vr569913FR8fr969e6tJkyaSroZgd3f369grAEZhhBQAAADVVp2rvdLT0+Xl5WUJo5Lk7+8vV1dXpaen12h7gYGBVvc9PDx05syZGq0DQO1FIAUAAEC1+fr6ymQyXffERTY2NmXCbWFhYZl2devWtbpvMplUXFx8XdsGUHsQSAEAAFBtbm5uCgsL05IlS3Tx4sUyz587d05+fn7Ky8tTXl6e5fEjR47o3Llz8vf3lyQ1adJEJ0+etFo2NTW1xvXUrVtXRUVFNV4OQO1AIAUAAECNLFmyREVFRercubM2bNigzMxMpaena9GiRerSpYtCQ0MVEBCg8PBwpaSkaN++fRo+fLi6d++u4OBgSVLPnj114MABrV69WpmZmXr99dd1+PDhGtfi4+Oj+Ph4nTp1SmfPnr3RuwrgJiOQAgAAoEZatmyplJQUPfzwwxo/frzat2+v3r17Kz4+XkuXLpXJZNKnn36qhg0b6qGHHlJoaKhatmypmJgYyzrCwsIUFRWlV199VZ06ddKFCxc0fPjwGtcyf/58xcXFycvLSx06dLiRuwngFuB7SAEAAAAAhmCEFAAAAABgCAIpAAAAAMAQBFIAAAAAgCEIpAAAAAAAQxBIAQAAAACGIJACAAAAAAxBIAUAAAAAGIJACgAAAAAwBIEUAAAAAGAIAikAAAAAwBAEUgAAAACAIQikAAAAAABD/D9MWvy57NfE7wAAAABJRU5ErkJggg==\n"},"metadata":{}}],"source":["g3 = sns.countplot(y = 'Q3', data = df_updated, hue = 'Treatment', order = df_updated['Q3'].sort_values())\n","plt.xlabel('Count')\n","plt.title('Opinions About the Video by Treatment')"]},{"cell_type":"markdown","metadata":{"id":"43Rtmq_ATO1E"},"source":["## Social media preference"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"F_qdArAYRC8y","executionInfo":{"status":"ok","timestamp":1709852496308,"user_tz":300,"elapsed":3,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["columns_to_convert = ['TikTok preference', 'Facebook preference', 'Instagram preference', 'Youtube preference', 'X preference']\n","df_updated[columns_to_convert] = df_updated[columns_to_convert].astype(int)\n","\n","social = {\n","    'TikTok': [df_updated['TikTok preference'].sum()],\n","    'Facebook': [df_updated['Facebook preference'].sum()],\n","    'Instagram': [df_updated['Instagram preference'].sum()],\n","    'Youtube': [df_updated['Youtube preference'].sum()],\n","    'X': [df_updated['X preference'].sum()]}\n","\n","social = pd.DataFrame(social)"]},{"cell_type":"code","execution_count":17,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":452},"executionInfo":{"elapsed":287,"status":"ok","timestamp":1709852496592,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"iXfSVBICSVvP","outputId":"bdff89e5-85d5-40a3-a97e-66b87bae8a0f"},"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 640x480 with 1 Axes>"],"image/png":"\n"},"metadata":{}}],"source":["sns.barplot(data = social, color = '#aec6cf')\n","plt.title('Social Media Preference')\n","plt.show()"]},{"cell_type":"markdown","metadata":{"id":"AE-Qp7cdgZEI"},"source":["## Comments by treatment"]},{"cell_type":"code","execution_count":18,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":707},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1709852496593,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"tYXKiF9FTT9C","outputId":"93139473-cb66-43ee-93ab-419c72cff0d1"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    index                                                 Q4\n","0       2        Makes use of inappropriate cultural beliefs\n","1       4  I don’t like the beauty ideal promoted by the ...\n","2      11  Why only slim girls? I like this commercial bu...\n","3      21                                               butt\n","4      26           I didn’t get it, making no sense to me. \n","5      29  The main message of the commercial was “ are y...\n","6      39  It's just a bunch of pretty girls in good shap...\n","7      44                                          Good body\n","8      47                                      Feel so good！\n","9      53  I feel that all the characters in this video a...\n","10     57                                   Sunshine is good\n","11     66  There are many other ways in which a supplemen...\n","12     73                     generic but somewhat inspiring\n","13     74                                             boring\n","14     79           I would not interact with it in any form\n","15     88                  Probably won't leave any comments\n","16     90   This video is too ordinary, not incentive enough\n","17     96   It’s unhealthy to promote such beauty standards.\n","18    102                                 Excited for summer\n","19    104                                       Problematic \n","20    114                                              Cool "],"text/html":["\n","  <div id=\"df-18609d5b-89eb-410a-b974-416b0c39b358\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>Q4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2</td>\n","      <td>Makes use of inappropriate cultural beliefs</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>4</td>\n","      <td>I don’t like the beauty ideal promoted by the ...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>11</td>\n","      <td>Why only slim girls? I like this commercial bu...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>21</td>\n","      <td>butt</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>26</td>\n","      <td>I didn’t get it, making no sense to me.</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>29</td>\n","      <td>The main message of the commercial was “ are y...</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>39</td>\n","      <td>It's just a bunch of pretty girls in good shap...</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>44</td>\n","      <td>Good body</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>47</td>\n","      <td>Feel so good！</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>53</td>\n","      <td>I feel that all the characters in this video a...</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>57</td>\n","      <td>Sunshine is good</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>66</td>\n","      <td>There are many other ways in which a supplemen...</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>73</td>\n","      <td>generic but somewhat inspiring</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>74</td>\n","      <td>boring</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>79</td>\n","      <td>I would not interact with it in any form</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>88</td>\n","      <td>Probably won't leave any comments</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>90</td>\n","      <td>This video is too ordinary, not incentive enough</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>96</td>\n","      <td>It’s unhealthy to promote such beauty standards.</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>102</td>\n","      <td>Excited for summer</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>104</td>\n","      <td>Problematic</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>114</td>\n","      <td>Cool</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-18609d5b-89eb-410a-b974-416b0c39b358')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-18609d5b-89eb-410a-b974-416b0c39b358 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-18609d5b-89eb-410a-b974-416b0c39b358');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-ea766470-d711-4631-8333-12aeb20cd6a5\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ea766470-d711-4631-8333-12aeb20cd6a5')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-ea766470-d711-4631-8333-12aeb20cd6a5 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"comm_0\",\n  \"rows\": 21,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34,\n        \"min\": 2,\n        \"max\": 114,\n        \"num_unique_values\": 21,\n        \"samples\": [\n          2,\n          96,\n          88\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q4\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 21,\n        \"samples\": [\n          \"Makes use of inappropriate cultural beliefs\",\n          \"It\\u2019s unhealthy to promote such beauty standards.\",\n          \"Probably won't leave any comments\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":18}],"source":["comm_0 = pd.DataFrame(treat_0['Q4'].dropna())\n","comm_0.reset_index()"]},{"cell_type":"code","execution_count":19,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":739},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1709852496593,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"p_epMriKguoV","outputId":"56a04e81-de58-40f1-c9b1-87ca714afdbf"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    index                                                 Q4\n","0       3  It reminds me that we need to drink protein/wo...\n","1       6                          it's plain and stereotype\n","2       7  I think in a way this video qualifies the idea...\n","3       9           I don’t think I would post any comments \n","4      12                    Very female customer oriented. \n","5      15                     Stereotypical beauty standards\n","6      23                                          Its great\n","7      24                                What is it selling?\n","8      31                               Charming characters \n","9      34                    Nice one, remind me to keep fit\n","10     36  Positive and uplifting, the music is dynamic a...\n","11     42  Is this an ads for protein or no tanner or som...\n","12     51                           Just a normal commercial\n","13     54                   So ready for the summer vibez 😗🔥\n","14     55  Both the title and the content are inappropria...\n","15     68                                great summer vibes \n","16     87                              Fitness keep healthy \n","17     94  The commercial shows female models who fit the...\n","18     95                                  Myself not ready \n","19    100                         Not sure what the focus is\n","20    103                                 It's a good video.\n","21    107  It motivates me to keep fit by exercising, but..."],"text/html":["\n","  <div id=\"df-2465426b-78e4-4802-a90a-06a287a0c018\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>Q4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>It reminds me that we need to drink protein/wo...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6</td>\n","      <td>it's plain and stereotype</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>7</td>\n","      <td>I think in a way this video qualifies the idea...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>9</td>\n","      <td>I don’t think I would post any comments</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>12</td>\n","      <td>Very female customer oriented.</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>15</td>\n","      <td>Stereotypical beauty standards</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>23</td>\n","      <td>Its great</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>24</td>\n","      <td>What is it selling?</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>31</td>\n","      <td>Charming characters</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>34</td>\n","      <td>Nice one, remind me to keep fit</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>36</td>\n","      <td>Positive and uplifting, the music is dynamic a...</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>42</td>\n","      <td>Is this an ads for protein or no tanner or som...</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>51</td>\n","      <td>Just a normal commercial</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>54</td>\n","      <td>So ready for the summer vibez 😗🔥</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>55</td>\n","      <td>Both the title and the content are inappropria...</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>68</td>\n","      <td>great summer vibes</td>\n","    </tr>\n","    <tr>\n","      <th>16</th>\n","      <td>87</td>\n","      <td>Fitness keep healthy</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>94</td>\n","      <td>The commercial shows female models who fit the...</td>\n","    </tr>\n","    <tr>\n","      <th>18</th>\n","      <td>95</td>\n","      <td>Myself not ready</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>100</td>\n","      <td>Not sure what the focus is</td>\n","    </tr>\n","    <tr>\n","      <th>20</th>\n","      <td>103</td>\n","      <td>It's a good video.</td>\n","    </tr>\n","    <tr>\n","      <th>21</th>\n","      <td>107</td>\n","      <td>It motivates me to keep fit by exercising, but...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2465426b-78e4-4802-a90a-06a287a0c018')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-2465426b-78e4-4802-a90a-06a287a0c018 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-2465426b-78e4-4802-a90a-06a287a0c018');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-8d9234b7-ea08-4f08-ab75-1520abb1beb4\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-8d9234b7-ea08-4f08-ab75-1520abb1beb4')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-8d9234b7-ea08-4f08-ab75-1520abb1beb4 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"comm_1\",\n  \"rows\": 22,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35,\n        \"min\": 3,\n        \"max\": 107,\n        \"num_unique_values\": 22,\n        \"samples\": [\n          3,\n          54,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q4\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 22,\n        \"samples\": [\n          \"It reminds me that we need to drink protein/work out in order to get fit body. But that's not the only option. We can choose to exercise to get in shape or maintain our status quo.\",\n          \"So ready for the summer vibez \\ud83d\\ude17\\ud83d\\udd25\",\n          \"Charming characters \"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":19}],"source":["comm_1 = pd.DataFrame(treat_1['Q4'].dropna())\n","comm_1.reset_index()"]},{"cell_type":"code","execution_count":20,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":551},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1709852496593,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"Q7Smr77igxlo","outputId":"355c5755-0de0-42df-ba56-670b42019ab6"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    index                                                 Q4\n","0       0  beach body doesn't necessarily mean supermodel...\n","1       1  Ordinary, can know the aim of the advertisemen...\n","2      38  I don't think this commercial put enough empha...\n","3      40                  Want to got to the gym right now!\n","4      41                                            LOVEIT！\n","5      43  I suggest you can have more elements for the p...\n","6      46  The music is dynamic, natural and close to the...\n","7      49   Beach body ready means workout not protein shake\n","8      67    Anybody and any body can be ready for the beach\n","9      78  I would like to listen to more conversations o...\n","10     80            Beautiful ad, if you know what I mean. \n","11     83                              overall unattractive \n","12     84                           #motivation to exercise \n","13     93                                   nothing tbh haha\n","14    105  It looks like this brand only faces the slim b...\n","15    108  The video showcased vibrant colors which captu..."],"text/html":["\n","  <div id=\"df-0c9ed312-96f0-44c4-8e65-983eb9d83174\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>index</th>\n","      <th>Q4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>beach body doesn't necessarily mean supermodel...</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>Ordinary, can know the aim of the advertisemen...</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>38</td>\n","      <td>I don't think this commercial put enough empha...</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>40</td>\n","      <td>Want to got to the gym right now!</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>41</td>\n","      <td>LOVEIT！</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>43</td>\n","      <td>I suggest you can have more elements for the p...</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>46</td>\n","      <td>The music is dynamic, natural and close to the...</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>49</td>\n","      <td>Beach body ready means workout not protein shake</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>67</td>\n","      <td>Anybody and any body can be ready for the beach</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>78</td>\n","      <td>I would like to listen to more conversations o...</td>\n","    </tr>\n","    <tr>\n","      <th>10</th>\n","      <td>80</td>\n","      <td>Beautiful ad, if you know what I mean.</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>83</td>\n","      <td>overall unattractive</td>\n","    </tr>\n","    <tr>\n","      <th>12</th>\n","      <td>84</td>\n","      <td>#motivation to exercise</td>\n","    </tr>\n","    <tr>\n","      <th>13</th>\n","      <td>93</td>\n","      <td>nothing tbh haha</td>\n","    </tr>\n","    <tr>\n","      <th>14</th>\n","      <td>105</td>\n","      <td>It looks like this brand only faces the slim b...</td>\n","    </tr>\n","    <tr>\n","      <th>15</th>\n","      <td>108</td>\n","      <td>The video showcased vibrant colors which captu...</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0c9ed312-96f0-44c4-8e65-983eb9d83174')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0c9ed312-96f0-44c4-8e65-983eb9d83174 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0c9ed312-96f0-44c4-8e65-983eb9d83174');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-7fd2d15b-ae05-4859-834f-3e625c16dd08\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-7fd2d15b-ae05-4859-834f-3e625c16dd08')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-7fd2d15b-ae05-4859-834f-3e625c16dd08 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","summary":"{\n  \"name\": \"comm_2\",\n  \"rows\": 16,\n  \"fields\": [\n    {\n      \"column\": \"index\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 32,\n        \"min\": 0,\n        \"max\": 108,\n        \"num_unique_values\": 16,\n        \"samples\": [\n          0,\n          1,\n          43\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q4\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 16,\n        \"samples\": [\n          \"beach body doesn't necessarily mean supermodel body\",\n          \"Ordinary, can know the aim of the advertisement clearly and instantly but would not live on in my memory\",\n          \"I suggest you can have more elements for the product you want to share.\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":20}],"source":["comm_2 = pd.DataFrame(treat_2['Q4'].dropna())\n","comm_2.reset_index()"]},{"cell_type":"markdown","metadata":{"id":"H1ODa2TWmjRw"},"source":["# Data Analysis"]},{"cell_type":"markdown","metadata":{"id":"sEn66eorintp"},"source":["## ATE"]},{"cell_type":"code","execution_count":21,"metadata":{"id":"pfQL0y7iIVH9","executionInfo":{"status":"ok","timestamp":1709852496871,"user_tz":300,"elapsed":285,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["# Further cleaning to retrieve numerical values for question 1, 2 and mapping answers for question 3\n","dataframes = [treat_0, treat_1, treat_2]\n","for df in dataframes:\n","    df['Q1'] = df['Q1'].str.extract('(\\d+)').astype(float)\n","    df['Q2'] = df['Q2'].str.extract('(\\d+)').astype(float)\n"]},{"cell_type":"code","execution_count":22,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":362},"executionInfo":{"elapsed":11,"status":"ok","timestamp":1709852496871,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"sfga9Z_LIrT6","outputId":"60e45386-e062-40c6-d4f8-7979bf3ecef9"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              StartDate              EndDate   Q1   Q2  \\\n","2   2024-02-24 20:21:41  2024-02-24 20:23:24  3.0  2.0   \n","4   2024-02-24 13:44:14  2024-02-25 11:12:54  2.0  1.0   \n","5   2024-02-25 12:49:30  2024-02-25 12:51:56  4.0  2.0   \n","8   2024-02-26 16:28:06  2024-02-26 16:30:25  2.0  1.0   \n","11  2024-02-26 16:29:07  2024-02-26 16:33:01  4.0  3.0   \n","\n","                                             Q3  \\\n","2   This video promotes inappropriate messages.   \n","4         This video is an ordinary commercial.   \n","5         This video is an ordinary commercial.   \n","8         This video is an ordinary commercial.   \n","11            This video is a great commercial.   \n","\n","                                                   Q4    Age  Gender  \\\n","2         Makes use of inappropriate cultural beliefs  18-24  Female   \n","4   I don’t like the beauty ideal promoted by the ...  18-24  Female   \n","5                                                 NaN  25-34  Female   \n","8                                                 NaN  18-24    Male   \n","11  Why only slim girls? I like this commercial bu...  18-24    Male   \n","\n","   TikTok preference Facebook preference Instagram preference  \\\n","2                  1                   2                    4   \n","4                  3                   1                    4   \n","5                  1                   3                    5   \n","8                  1                   1                    1   \n","11                 1                   2                    3   \n","\n","   Youtube preference X preference  Treatment  \n","2                   4            1          0  \n","4                   4            4          0  \n","5                   5            2          0  \n","8                   1            1          0  \n","11                  5            5          0  "],"text/html":["\n","  <div id=\"df-0e704d92-11e0-40ba-924f-59f883c2c9a8\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>StartDate</th>\n","      <th>EndDate</th>\n","      <th>Q1</th>\n","      <th>Q2</th>\n","      <th>Q3</th>\n","      <th>Q4</th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>TikTok preference</th>\n","      <th>Facebook preference</th>\n","      <th>Instagram preference</th>\n","      <th>Youtube preference</th>\n","      <th>X preference</th>\n","      <th>Treatment</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>2024-02-24 20:21:41</td>\n","      <td>2024-02-24 20:23:24</td>\n","      <td>3.0</td>\n","      <td>2.0</td>\n","      <td>This video promotes inappropriate messages.</td>\n","      <td>Makes use of inappropriate cultural beliefs</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2024-02-24 13:44:14</td>\n","      <td>2024-02-25 11:12:54</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>This video is an ordinary commercial.</td>\n","      <td>I don’t like the beauty ideal promoted by the ...</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2024-02-25 12:49:30</td>\n","      <td>2024-02-25 12:51:56</td>\n","      <td>4.0</td>\n","      <td>2.0</td>\n","      <td>This video is an ordinary commercial.</td>\n","      <td>NaN</td>\n","      <td>25-34</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>2024-02-26 16:28:06</td>\n","      <td>2024-02-26 16:30:25</td>\n","      <td>2.0</td>\n","      <td>1.0</td>\n","      <td>This video is an ordinary commercial.</td>\n","      <td>NaN</td>\n","      <td>18-24</td>\n","      <td>Male</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>2024-02-26 16:29:07</td>\n","      <td>2024-02-26 16:33:01</td>\n","      <td>4.0</td>\n","      <td>3.0</td>\n","      <td>This video is a great commercial.</td>\n","      <td>Why only slim girls? I like this commercial bu...</td>\n","      <td>18-24</td>\n","      <td>Male</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0e704d92-11e0-40ba-924f-59f883c2c9a8')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0e704d92-11e0-40ba-924f-59f883c2c9a8 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0e704d92-11e0-40ba-924f-59f883c2c9a8');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3442648e-01a0-4d6f-8350-444e1afd6297\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3442648e-01a0-4d6f-8350-444e1afd6297')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3442648e-01a0-4d6f-8350-444e1afd6297 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"treat_0","repr_error":"0"}},"metadata":{},"execution_count":22}],"source":["# Checking the dataframe\n","treat_0.head()"]},{"cell_type":"code","execution_count":23,"metadata":{"id":"3pb5hZFaGF6w","executionInfo":{"status":"ok","timestamp":1709852496871,"user_tz":300,"elapsed":10,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["# mapping of the categories into numerical values for question 3\n","df_updated[\"Q3\"].unique()\n","mapping = {'This video is a poor commercial.': 1,\n","              'This video promotes inappropriate messages.': 2,\n","              'This video has an inappropriate title.': 3,\n","              'This video is an ordinary commercial.': 4,\n","              'This video is a great commercial.': 5,\n","              'This video encourages me to keep fit.': 6,\n","              'This video features beautiful characters, which is great.': 7}\n","\n","df_updated = df_updated.dropna(subset=['Q3'])\n","\n","df_updated['Q3'] = df_updated['Q3'].replace(mapping)"]},{"cell_type":"markdown","metadata":{"id":"HtJDn3dHG-8S"},"source":["### ATE for Q1-4"]},{"cell_type":"code","execution_count":24,"metadata":{"id":"VehFIjbUipXz","executionInfo":{"status":"ok","timestamp":1709852496871,"user_tz":300,"elapsed":10,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["def calculate_ATE(treatments, question):\n","    means = [treatment[question].mean() for treatment in treatments]\n","    ATE_1 = means[1] - means[0]\n","    ATE_2 = means[2] - means[1]\n","    return ATE_1, ATE_2\n","\n","treatments = [treat_0, treat_1, treat_2]\n","ATE_results = []\n","\n","# Calculate ATE for Q1 and Q2\n","for question in [\"Q1\", \"Q2\"]:\n","    ATE_1, ATE_2 = calculate_ATE(treatments, question)\n","    ATE_results.append([question, ATE_1, ATE_2])\n","\n","# Calculate ATE for Q3\n","Q3_by_treatment = df_updated.groupby('Treatment')['Q3'].mean()\n","Q3_ATE_1 = Q3_by_treatment.loc[1] - Q3_by_treatment.loc[0]\n","Q3_ATE_2 = Q3_by_treatment.loc[2] - Q3_by_treatment.loc[1]\n","ATE_results.append([\"Q3\", Q3_ATE_1, Q3_ATE_2])"]},{"cell_type":"code","execution_count":25,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1709852496871,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"c2WgoN0RKJi0","outputId":"4f32e2a5-5000-4864-dfbc-7374795817d0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["Question                                Q1        Q2        Q3        Q4\n","ATE (Treatment 1 vs Control)      0.208110  0.183065  0.461153  0.052632\n","ATE (Treatment 2 vs Treatment 1) -0.153846 -0.142191 -0.404605 -0.052632"],"text/html":["\n","  <div id=\"df-a3c72d40-71f7-4dfa-a85b-88e3b6f4e5a1\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Question</th>\n","      <th>Q1</th>\n","      <th>Q2</th>\n","      <th>Q3</th>\n","      <th>Q4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>ATE (Treatment 1 vs Control)</th>\n","      <td>0.208110</td>\n","      <td>0.183065</td>\n","      <td>0.461153</td>\n","      <td>0.052632</td>\n","    </tr>\n","    <tr>\n","      <th>ATE (Treatment 2 vs Treatment 1)</th>\n","      <td>-0.153846</td>\n","      <td>-0.142191</td>\n","      <td>-0.404605</td>\n","      <td>-0.052632</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a3c72d40-71f7-4dfa-a85b-88e3b6f4e5a1')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-a3c72d40-71f7-4dfa-a85b-88e3b6f4e5a1 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-a3c72d40-71f7-4dfa-a85b-88e3b6f4e5a1');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9bfc19cb-2cbd-4151-932c-b5e399daec94\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9bfc19cb-2cbd-4151-932c-b5e399daec94')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9bfc19cb-2cbd-4151-932c-b5e399daec94 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ATE_table","summary":"{\n  \"name\": \"ATE_table\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Q1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2559414527013919,\n        \"min\": -0.15384615384615374,\n        \"max\": 0.2081097197376267,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.15384615384615374,\n          0.2081097197376267\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.22999082165768353,\n        \"min\": -0.14219114219114237,\n        \"max\": 0.18306499701848544,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.14219114219114237,\n          0.18306499701848544\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.6121834554539546,\n        \"min\": -0.4046052631578947,\n        \"max\": 0.4611528822055133,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.4046052631578947,\n          0.4611528822055133\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.07443229275647877,\n        \"min\": -0.052631578947368474,\n        \"max\": 0.052631578947368474,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          -0.052631578947368474,\n          0.052631578947368474\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":25}],"source":["# mapping Q4\n","df_updated['Q4'] = df_updated['Q4'].notna().astype(int)\n","\n","df_updated\n","\n","Q4_by_treatment = df_updated.groupby('Treatment')['Q4'].mean()\n","\n","Q4_ATE_1 = Q4_by_treatment.loc[1] - Q4_by_treatment.loc[0]\n","Q4_ATE_2 = Q4_by_treatment.loc[2] - Q4_by_treatment.loc[1]\n","ATE_results.append([\"Q4\", Q4_ATE_1, Q4_ATE_2])\n","ATE_table = pd.DataFrame(ATE_results, columns=[\"Question\", \"ATE (Treatment 1 vs Control)\", \"ATE (Treatment 2 vs Treatment 1)\"])\n","ATE_table.set_index('Question', inplace=True)\n","ATE_table = ATE_table.transpose()\n","ATE_table"]},{"cell_type":"markdown","metadata":{"id":"3Ahv8PNEM-1a"},"source":["### T-test"]},{"cell_type":"code","execution_count":26,"metadata":{"id":"WzbbySJz9N3y","executionInfo":{"status":"ok","timestamp":1709852496871,"user_tz":300,"elapsed":9,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["# Mapping for Q3\n","def mapping(treatment, mapping, question, new_column_name):\n","    treatment = treatment.dropna(subset=[question])\n","    treatment[new_column_name] = treatment[question].replace(mapping)\n","    return treatment\n","\n","# Mapping for Q3\n","mapping_q3 = {'This video is a poor commercial.': 1,\n","              'This video promotes inappropriate messages.': 2,\n","              'This video has an inappropriate title.': 3,\n","              'This video is an ordinary commercial.': 4,\n","              'This video is a great commercial.': 5,\n","              'This video encourages me to keep fit.': 6,\n","              'This video features beautiful characters, which is great.': 7}\n","\n","treat_0 = mapping(treat_0, mapping_q3, 'Q3', 'Q3')\n","treat_1 = mapping(treat_1, mapping_q3, 'Q3', 'Q3')\n","treat_2 = mapping(treat_2, mapping_q3, 'Q3', 'Q3')"]},{"cell_type":"code","execution_count":27,"metadata":{"id":"d1n8EFLk9N3y","executionInfo":{"status":"ok","timestamp":1709852496871,"user_tz":300,"elapsed":8,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["# mapping for Q4\n","treat_0['Q4'] = treat_0['Q4'].notna().astype(int)\n","treat_1['Q4'] = treat_1['Q4'].notna().astype(int)\n","treat_2['Q4'] = treat_2['Q4'].notna().astype(int)"]},{"cell_type":"code","execution_count":28,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":8,"status":"ok","timestamp":1709852496871,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"Lb6eyKwl9N3p","outputId":"bbc2db28-2c66-443f-9f66-66de34fac993"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    Comparison Question  t-score (t)  P-value (p)\n","0      Treatment 1 vs. Control       Q1    -1.039932     0.301584\n","1  Treatment 2 vs. Treatment 1       Q1     0.757494     0.451371\n","2      Treatment 1 vs. Control       Q2    -0.640909     0.523460\n","3  Treatment 2 vs. Treatment 1       Q2     0.509733     0.611889\n","4      Treatment 1 vs. Control       Q3    -1.270667     0.207624\n","5  Treatment 2 vs. Treatment 1       Q3     1.103072     0.273884\n","6      Treatment 1 vs. Control       Q4    -0.465475     0.642889\n","7  Treatment 2 vs. Treatment 1       Q4     0.433720     0.665865"],"text/html":["\n","  <div id=\"df-37cbb8ec-0430-4aa6-930b-dfa084b734f0\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Comparison</th>\n","      <th>Question</th>\n","      <th>t-score (t)</th>\n","      <th>P-value (p)</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Treatment 1 vs. Control</td>\n","      <td>Q1</td>\n","      <td>-1.039932</td>\n","      <td>0.301584</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Treatment 2 vs. Treatment 1</td>\n","      <td>Q1</td>\n","      <td>0.757494</td>\n","      <td>0.451371</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Treatment 1 vs. Control</td>\n","      <td>Q2</td>\n","      <td>-0.640909</td>\n","      <td>0.523460</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Treatment 2 vs. Treatment 1</td>\n","      <td>Q2</td>\n","      <td>0.509733</td>\n","      <td>0.611889</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Treatment 1 vs. Control</td>\n","      <td>Q3</td>\n","      <td>-1.270667</td>\n","      <td>0.207624</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Treatment 2 vs. Treatment 1</td>\n","      <td>Q3</td>\n","      <td>1.103072</td>\n","      <td>0.273884</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Treatment 1 vs. Control</td>\n","      <td>Q4</td>\n","      <td>-0.465475</td>\n","      <td>0.642889</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Treatment 2 vs. Treatment 1</td>\n","      <td>Q4</td>\n","      <td>0.433720</td>\n","      <td>0.665865</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-37cbb8ec-0430-4aa6-930b-dfa084b734f0')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-37cbb8ec-0430-4aa6-930b-dfa084b734f0 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-37cbb8ec-0430-4aa6-930b-dfa084b734f0');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-f7d5bb29-3d08-47d2-b037-4c4a9866cd95\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f7d5bb29-3d08-47d2-b037-4c4a9866cd95')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-f7d5bb29-3d08-47d2-b037-4c4a9866cd95 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"results_table","summary":"{\n  \"name\": \"results_table\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Comparison\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Treatment 2 vs. Treatment 1\",\n          \"Treatment 1 vs. Control\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Question\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Q2\",\n          \"Q4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"t-score (t)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.8876154288744116,\n        \"min\": -1.2706673886237576,\n        \"max\": 1.1030724704377766,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.757494017975515,\n          1.1030724704377766\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"P-value (p)\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1798524964553786,\n        \"min\": 0.20762385883525483,\n        \"max\": 0.665864519360718,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.45137095184367204,\n          0.2738842286830095\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":28}],"source":["from statsmodels.stats.weightstats import ttest_ind\n","def t_test(groups, questions):\n","    results = []\n","    for question in questions:\n","        for i in range(len(groups) - 1):\n","            tstat, pvalue, _ = ttest_ind(groups[i][question], groups[i + 1][question], alternative='two-sided', usevar='pooled', value=0)\n","            comparison_label = f\"Treatment {i + 1} vs. Treatment {i}\" if i > 0 else \"Treatment 1 vs. Control\"\n","            results.append([comparison_label, question, tstat, pvalue])\n","    results_table = pd.DataFrame(results, columns=[\"Comparison\", \"Question\", \"t-score (t)\", \"P-value (p)\"])\n","    return results_table\n","\n","groups = [treat_0, treat_1, treat_2]\n","questions = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n","results_table = t_test(groups, questions)\n","results_table.reset_index(inplace=False)\n","results_table"]},{"cell_type":"markdown","metadata":{"id":"VzJqyhLxFcfa"},"source":["## CATE by gender group"]},{"cell_type":"code","execution_count":29,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":397},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1709852496872,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"iMT_d2ObOYFs","outputId":"e2e2b873-b623-4ce2-ad20-f8d85a84e0a0"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["              StartDate              EndDate                             Q1  \\\n","2   2024-02-24 20:21:41  2024-02-24 20:23:24                     3. Neutral   \n","4   2024-02-24 13:44:14  2024-02-25 11:12:54    2. I do not like this video   \n","5   2024-02-25 12:49:30  2024-02-25 12:51:56  4. I think this video is okay   \n","8   2024-02-26 16:28:06  2024-02-26 16:30:25    2. I do not like this video   \n","11  2024-02-26 16:29:07  2024-02-26 16:33:01  4. I think this video is okay   \n","\n","                                Q2  Q3  Q4    Age  Gender  TikTok preference  \\\n","2             2. Somewhat unlikely   2   1  18-24  Female                  1   \n","4            1. Extremely unlikely   4   1  18-24  Female                  3   \n","5             2. Somewhat unlikely   4   0  25-34  Female                  1   \n","8            1. Extremely unlikely   4   0  18-24    Male                  1   \n","11  3. Neither likely nor unlikely   5   1  18-24    Male                  1   \n","\n","    Facebook preference  Instagram preference  Youtube preference  \\\n","2                     2                     4                   4   \n","4                     1                     4                   4   \n","5                     3                     5                   5   \n","8                     1                     1                   1   \n","11                    2                     3                   5   \n","\n","    X preference  Treatment Incentive Incentive_other  \n","2              1          0       NaN             NaN  \n","4              4          0       NaN             NaN  \n","5              2          0       NaN             NaN  \n","8              1          0       NaN             NaN  \n","11             5          0       NaN             NaN  "],"text/html":["\n","  <div id=\"df-0a231e6c-c99f-40af-8320-dd0d2fd8cd39\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>StartDate</th>\n","      <th>EndDate</th>\n","      <th>Q1</th>\n","      <th>Q2</th>\n","      <th>Q3</th>\n","      <th>Q4</th>\n","      <th>Age</th>\n","      <th>Gender</th>\n","      <th>TikTok preference</th>\n","      <th>Facebook preference</th>\n","      <th>Instagram preference</th>\n","      <th>Youtube preference</th>\n","      <th>X preference</th>\n","      <th>Treatment</th>\n","      <th>Incentive</th>\n","      <th>Incentive_other</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2</th>\n","      <td>2024-02-24 20:21:41</td>\n","      <td>2024-02-24 20:23:24</td>\n","      <td>3. Neutral</td>\n","      <td>2. Somewhat unlikely</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2024-02-24 13:44:14</td>\n","      <td>2024-02-25 11:12:54</td>\n","      <td>2. I do not like this video</td>\n","      <td>1. Extremely unlikely</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>18-24</td>\n","      <td>Female</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2024-02-25 12:49:30</td>\n","      <td>2024-02-25 12:51:56</td>\n","      <td>4. I think this video is okay</td>\n","      <td>2. Somewhat unlikely</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>25-34</td>\n","      <td>Female</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>2024-02-26 16:28:06</td>\n","      <td>2024-02-26 16:30:25</td>\n","      <td>2. I do not like this video</td>\n","      <td>1. Extremely unlikely</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>18-24</td>\n","      <td>Male</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","    <tr>\n","      <th>11</th>\n","      <td>2024-02-26 16:29:07</td>\n","      <td>2024-02-26 16:33:01</td>\n","      <td>4. I think this video is okay</td>\n","      <td>3. Neither likely nor unlikely</td>\n","      <td>5</td>\n","      <td>1</td>\n","      <td>18-24</td>\n","      <td>Male</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>5</td>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0a231e6c-c99f-40af-8320-dd0d2fd8cd39')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0a231e6c-c99f-40af-8320-dd0d2fd8cd39 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0a231e6c-c99f-40af-8320-dd0d2fd8cd39');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fd8e78f7-5086-4256-9341-acf4338b566a\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fd8e78f7-5086-4256-9341-acf4338b566a')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fd8e78f7-5086-4256-9341-acf4338b566a button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df_updated","repr_error":"Out of range float values are not JSON compliant: nan"}},"metadata":{},"execution_count":29}],"source":["df_updated.head()"]},{"cell_type":"code","execution_count":30,"metadata":{"id":"eeW1IhxEP9g5","executionInfo":{"status":"ok","timestamp":1709852496872,"user_tz":300,"elapsed":8,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["df_updated['Q1'] = df_updated['Q1'].str.extract('(\\d+)').astype(float)\n","df_updated['Q2'] = df_updated['Q2'].str.extract('(\\d+)').astype(float)"]},{"cell_type":"code","execution_count":31,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":300},"executionInfo":{"elapsed":409,"status":"ok","timestamp":1709852497273,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"wrLC9qSZNimq","outputId":"8a84b328-4211-40a3-dda6-e2a71daa127c"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["   Gender  CATE_1_vs_0  CATE_2_vs_0  CATE_2_vs_1 Question\n","0  Female     0.002404    -0.207386    -0.209790       Q1\n","1    Male     0.733333     0.566667    -0.166667       Q1\n","2  Female     0.038462     0.000000    -0.038462       Q2\n","3    Male     0.366667    -0.022222    -0.388889       Q2\n","4  Female    -0.045673    -0.241477    -0.195804       Q3\n","5    Male     1.650000     0.788889    -0.861111       Q3\n","6  Female     0.122596     0.059659    -0.062937       Q4\n","7    Male    -0.066667    -0.066667     0.000000       Q4"],"text/html":["\n","  <div id=\"df-7e9bbf2a-8e6c-42ed-ac72-08d8538e9fab\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Gender</th>\n","      <th>CATE_1_vs_0</th>\n","      <th>CATE_2_vs_0</th>\n","      <th>CATE_2_vs_1</th>\n","      <th>Question</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Female</td>\n","      <td>0.002404</td>\n","      <td>-0.207386</td>\n","      <td>-0.209790</td>\n","      <td>Q1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Male</td>\n","      <td>0.733333</td>\n","      <td>0.566667</td>\n","      <td>-0.166667</td>\n","      <td>Q1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Female</td>\n","      <td>0.038462</td>\n","      <td>0.000000</td>\n","      <td>-0.038462</td>\n","      <td>Q2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Male</td>\n","      <td>0.366667</td>\n","      <td>-0.022222</td>\n","      <td>-0.388889</td>\n","      <td>Q2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Female</td>\n","      <td>-0.045673</td>\n","      <td>-0.241477</td>\n","      <td>-0.195804</td>\n","      <td>Q3</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Male</td>\n","      <td>1.650000</td>\n","      <td>0.788889</td>\n","      <td>-0.861111</td>\n","      <td>Q3</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Female</td>\n","      <td>0.122596</td>\n","      <td>0.059659</td>\n","      <td>-0.062937</td>\n","      <td>Q4</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Male</td>\n","      <td>-0.066667</td>\n","      <td>-0.066667</td>\n","      <td>0.000000</td>\n","      <td>Q4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e9bbf2a-8e6c-42ed-ac72-08d8538e9fab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-7e9bbf2a-8e6c-42ed-ac72-08d8538e9fab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-7e9bbf2a-8e6c-42ed-ac72-08d8538e9fab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-192cc013-b85d-4025-96c6-b740a55159a7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-192cc013-b85d-4025-96c6-b740a55159a7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-192cc013-b85d-4025-96c6-b740a55159a7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"all_cate_results","summary":"{\n  \"name\": \"all_cate_results\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"Gender\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Male\",\n          \"Female\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CATE_1_vs_0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.5900341598178986,\n        \"min\": -0.06666666666666671,\n        \"max\": 1.6500000000000004,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.7333333333333334,\n          1.6500000000000004\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CATE_2_vs_0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.3697551649696924,\n        \"min\": -0.24147727272727249,\n        \"max\": 0.7888888888888896,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0.5666666666666664,\n          0.7888888888888896\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"CATE_2_vs_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.2792228891815613,\n        \"min\": -0.8611111111111107,\n        \"max\": 0.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          -0.16666666666666696,\n          -0.8611111111111107\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Question\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Q2\",\n          \"Q4\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":31}],"source":["df_updated = df_updated.loc[df_updated['Gender'] != \"Prefer not to say\"]\n","\n","\n","def calculate_CATE(df, question):\n","    cate_results = df.groupby(['Treatment', 'Gender'])[question].mean().unstack()\n","    cate = {}\n","    for gender in cate_results.columns:\n","        cate[gender] = {\n","            'CATE_1_vs_0': cate_results[gender][1] - cate_results[gender][0],\n","            'CATE_2_vs_0': cate_results[gender][2] - cate_results[gender][0],\n","            'CATE_2_vs_1': cate_results[gender][2] - cate_results[gender][1]\n","        }\n","    cate_df = pd.DataFrame(cate).transpose()\n","    cate_df.reset_index(inplace=True)\n","    cate_df.rename(columns={'index': 'Gender'}, inplace=True)\n","    return cate_df\n","\n","all_cate_results = pd.DataFrame()\n","\n","questions = [\"Q1\", \"Q2\", \"Q3\", \"Q4\"]\n","for question in questions:\n","    cate_df = calculate_CATE(df_updated, question)\n","    cate_df['Question'] = question\n","    all_cate_results = pd.concat([all_cate_results, cate_df], ignore_index=True)\n","\n","all_cate_results.reset_index(inplace=False)\n","all_cate_results\n"]},{"cell_type":"markdown","metadata":{"id":"-_8W3E7epBxK"},"source":["## Controlling for Covariates"]},{"cell_type":"code","execution_count":32,"metadata":{"id":"f0ZqgG4WlnaA","executionInfo":{"status":"ok","timestamp":1709852497273,"user_tz":300,"elapsed":6,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["df_cov = df_updated.copy()"]},{"cell_type":"code","execution_count":33,"metadata":{"id":"MDiKw2DxpMGf","executionInfo":{"status":"ok","timestamp":1709852497273,"user_tz":300,"elapsed":5,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["import numpy as np\n","\n","df_cov['Commented'] = np.where(df_cov['Q4'].notna(), 1, 0)\n","#df_updated = pd.get_dummies(df_updated, columns=['Treatment'], prefix='Treatment')\n","df_cov = pd.get_dummies(df_cov, columns=['Gender'], prefix='Gender')"]},{"cell_type":"code","execution_count":34,"metadata":{"id":"sVZ7SNIapObn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709852498019,"user_tz":300,"elapsed":751,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"7709b220-7b64-4f1c-9ca1-986fd2d33333"},"outputs":[{"output_type":"stream","name":"stdout","text":["                            OLS Regression Results                            \n","==============================================================================\n","Dep. Variable:              Commented   R-squared:                        -inf\n","Model:                            OLS   Adj. R-squared:                   -inf\n","Method:                 Least Squares   F-statistic:                 4.605e+31\n","Date:                Thu, 07 Mar 2024   Prob (F-statistic):               0.00\n","Time:                        23:01:37   Log-Likelihood:                 3682.2\n","No. Observations:                 111   AIC:                            -7356.\n","Df Residuals:                     107   BIC:                            -7345.\n","Df Model:                           3                                         \n","Covariance Type:                  HC1                                         \n","===========================================================================================\n","                              coef    std err          z      P>|z|      [0.025      0.975]\n","-------------------------------------------------------------------------------------------\n","Intercept                   0.6667   1.13e-16    5.9e+15      0.000       0.667       0.667\n","Treatment                4.233e-16   8.28e-17      5.113      0.000    2.61e-16    5.86e-16\n","Gender_Male                 0.3333   1.85e-16   1.81e+15      0.000       0.333       0.333\n","Treatment:Gender_Male   -3.469e-16    1.4e-16     -2.483      0.013   -6.21e-16   -7.31e-17\n","Gender_Female               0.3333   1.73e-16   1.93e+15      0.000       0.333       0.333\n","Treatment:Gender_Female  6.453e-16   1.21e-16      5.316      0.000    4.07e-16    8.83e-16\n","==============================================================================\n","Omnibus:                       14.585   Durbin-Watson:                   0.291\n","Prob(Omnibus):                  0.001   Jarque-Bera (JB):                8.539\n","Skew:                          -0.517   Prob(JB):                       0.0140\n","Kurtosis:                       2.119   Cond. No.                     3.19e+16\n","==============================================================================\n","\n","Notes:\n","[1] Standard Errors are heteroscedasticity robust (HC1)\n","[2] The smallest eigenvalue is 3.79e-31. This might indicate that there are\n","strong multicollinearity problems or that the design matrix is singular.\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/statsmodels/base/model.py:1896: ValueWarning: covariance of constraints does not have full rank. The number of constraints is 5, but rank is 4\n","  warnings.warn('covariance of constraints does not have full '\n"]}],"source":["import statsmodels.api as sm\n","from statsmodels.iolib.summary2 import summary_col\n","\n","reg_treatment = sm.OLS.from_formula(\"Commented ~ Treatment*Gender_Male + Treatment*Gender_Female\", data=df_cov).fit(cov_type='HC1')\n","\n","print(reg_treatment.summary())"]},{"cell_type":"markdown","metadata":{"id":"mZ4SO6Fn-Id5"},"source":["#Fixed effect"]},{"cell_type":"code","execution_count":35,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":11154,"status":"ok","timestamp":1709852509171,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"h_SsituBj_qk","outputId":"f6f45655-a3bc-48e4-cb30-eba4ab487c75"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pyfixest\n","  Downloading pyfixest-0.17.1-py3-none-any.whl (2.1 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m2.1/2.1 MB\u001b[0m \u001b[31m15.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting formulaic<1.0.0,>=0.6.6 (from pyfixest)\n","  Downloading formulaic-0.6.6-py3-none-any.whl (91 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m91.0/91.0 kB\u001b[0m \u001b[31m12.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting lets-plot>=4.0.1 (from pyfixest)\n","  Downloading lets_plot-4.3.0-cp310-cp310-manylinux_2_17_x86_64.manylinux2014_x86_64.whl (3.0 MB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m3.0/3.0 MB\u001b[0m \u001b[31m70.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numba>=0.58.0 in /usr/local/lib/python3.10/dist-packages (from pyfixest) (0.58.1)\n","Requirement already satisfied: numpy>=1.19.0 in /usr/local/lib/python3.10/dist-packages (from pyfixest) (1.25.2)\n","Requirement already satisfied: pandas>=1.1.0 in /usr/local/lib/python3.10/dist-packages (from pyfixest) (1.5.3)\n","Requirement already satisfied: scipy>=1.6 in /usr/local/lib/python3.10/dist-packages (from pyfixest) (1.11.4)\n","Requirement already satisfied: tabulate>=0.9.0 in /usr/local/lib/python3.10/dist-packages (from pyfixest) (0.9.0)\n","Collecting astor>=0.8 (from formulaic<1.0.0,>=0.6.6->pyfixest)\n","  Downloading astor-0.8.1-py2.py3-none-any.whl (27 kB)\n","Collecting interface-meta>=1.2.0 (from formulaic<1.0.0,>=0.6.6->pyfixest)\n","  Downloading interface_meta-1.3.0-py3-none-any.whl (14 kB)\n","Requirement already satisfied: typing-extensions>=4.2.0 in /usr/local/lib/python3.10/dist-packages (from formulaic<1.0.0,>=0.6.6->pyfixest) (4.10.0)\n","Requirement already satisfied: wrapt>=1.0 in /usr/local/lib/python3.10/dist-packages (from formulaic<1.0.0,>=0.6.6->pyfixest) (1.14.1)\n","Collecting pypng (from lets-plot>=4.0.1->pyfixest)\n","  Downloading pypng-0.20220715.0-py3-none-any.whl (58 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m58.1/58.1 kB\u001b[0m \u001b[31m8.0 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hCollecting palettable (from lets-plot>=4.0.1->pyfixest)\n","  Downloading palettable-3.3.3-py2.py3-none-any.whl (332 kB)\n","\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m332.3/332.3 kB\u001b[0m \u001b[31m27.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: llvmlite<0.42,>=0.41.0dev0 in /usr/local/lib/python3.10/dist-packages (from numba>=0.58.0->pyfixest) (0.41.1)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->pyfixest) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.1.0->pyfixest) (2023.4)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.10/dist-packages (from python-dateutil>=2.8.1->pandas>=1.1.0->pyfixest) (1.16.0)\n","Installing collected packages: pypng, palettable, interface-meta, astor, lets-plot, formulaic, pyfixest\n","Successfully installed astor-0.8.1 formulaic-0.6.6 interface-meta-1.3.0 lets-plot-4.3.0 palettable-3.3.3 pyfixest-0.17.1 pypng-0.20220715.0\n"]}],"source":["pip install pyfixest"]},{"cell_type":"code","execution_count":36,"metadata":{"id":"sVmatlFJjssw","executionInfo":{"status":"ok","timestamp":1709852510760,"user_tz":300,"elapsed":1592,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import statsmodels.api as sm\n","\n","from pyfixest.estimation import feols\n","from pyfixest.utils import get_data\n","from pyfixest.summarize import etable"]},{"cell_type":"markdown","metadata":{"id":"vwQ7v_fDvH6i"},"source":["### Gender"]},{"cell_type":"code","execution_count":37,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":18280,"status":"ok","timestamp":1709852529037,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"},"user_tz":300},"id":"iBnmbYvlkI4a","outputId":"0db96b5f-28fd-4db0-8551-4c087bead7b4"},"outputs":[{"output_type":"stream","name":"stdout","text":["                       est1           est2           est3           est4\n","------------  -------------  -------------  -------------  -------------\n","depvar                   Q1             Q2             Q3             Q4\n","------------------------------------------------------------------------\n","Treatment     0.204 (0.210)  0.129 (0.253)  0.421 (0.351)  0.070 (0.110)\n","------------------------------------------------------------------------\n","Gender                    x              x              x              x\n","------------------------------------------------------------------------\n","R2                    0.018          0.039          0.040          0.045\n","S.E. type            hetero         hetero         hetero         hetero\n","Observations             80             80             80             80\n","------------------------------------------------------------------------\n","Significance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n","Format of coefficient cell:\n","Coefficient (Std. Error)\n"]}],"source":["# Convert to categorical:\n","df_updated['Gender'] = df_updated['Gender'].astype('category')\n","df_updated_0_1 = df_updated[df_updated['Treatment']!=2]\n","model1 = feols(\"Q1 ~  Treatment | Gender\", data = df_updated_0_1).vcov(\"hetero\")\n","model2= feols(\"Q2 ~  Treatment | Gender\", data = df_updated_0_1).vcov(\"hetero\")\n","model3= feols(\"Q3 ~  Treatment | Gender\", data = df_updated_0_1).vcov(\"hetero\")\n","model4= feols(\"Q4 ~  Treatment | Gender\", data = df_updated_0_1).vcov(\"hetero\")\n","etable([model1, model2,model3, model4])"]},{"cell_type":"code","execution_count":38,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"KbmJlVoFvDGv","executionInfo":{"status":"ok","timestamp":1709852529401,"user_tz":300,"elapsed":366,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"f793be5a-3da4-4170-ced8-acc59b9a33e2"},"outputs":[{"output_type":"stream","name":"stdout","text":["                        est1            est2            est3            est4\n","------------  --------------  --------------  --------------  --------------\n","depvar                    Q1              Q2              Q3              Q4\n","----------------------------------------------------------------------------\n","Treatment     -0.197 (0.252)  -0.144 (0.285)  -0.396 (0.356)  -0.044 (0.117)\n","----------------------------------------------------------------------------\n","Gender                     x               x               x               x\n","----------------------------------------------------------------------------\n","R2                     0.062           0.040           0.116           0.074\n","S.E. type             hetero          hetero          hetero          hetero\n","Observations              69              69              69              69\n","----------------------------------------------------------------------------\n","Significance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n","Format of coefficient cell:\n","Coefficient (Std. Error)\n"]}],"source":["df_updated['Gender'] = df_updated['Gender'].astype('category')\n","df_updated_0_1 = df_updated[df_updated['Treatment']!=0]\n","model1 = feols(\"Q1 ~  Treatment | Gender\", data = df_updated_0_1).vcov(\"hetero\")\n","model2= feols(\"Q2 ~  Treatment | Gender\", data = df_updated_0_1).vcov(\"hetero\")\n","model3= feols(\"Q3 ~  Treatment | Gender\", data = df_updated_0_1).vcov(\"hetero\")\n","model4= feols(\"Q4 ~  Treatment | Gender\", data = df_updated_0_1).vcov(\"hetero\")\n","etable([model1, model2,model3, model4])"]},{"cell_type":"markdown","metadata":{"id":"hCPeFsRevLQ3"},"source":["### Age"]},{"cell_type":"code","execution_count":39,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"aXPNx0e1vFpf","executionInfo":{"status":"ok","timestamp":1709852529674,"user_tz":300,"elapsed":275,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"f417617c-1809-48b4-95cc-085aa271df9a"},"outputs":[{"output_type":"stream","name":"stdout","text":["                        est1            est2            est3            est4\n","------------  --------------  --------------  --------------  --------------\n","depvar                    Q1              Q2              Q3              Q4\n","----------------------------------------------------------------------------\n","Treatment     -0.254 (0.260)  -0.180 (0.297)  -0.474 (0.371)  -0.012 (0.123)\n","----------------------------------------------------------------------------\n","Age                        x               x               x               x\n","----------------------------------------------------------------------------\n","R2                     0.030           0.008           0.035           0.023\n","S.E. type             hetero          hetero          hetero          hetero\n","Observations              69              69              69              69\n","----------------------------------------------------------------------------\n","Significance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n","Format of coefficient cell:\n","Coefficient (Std. Error)\n"]}],"source":["df_updated['Age'] = df_updated['Age'].astype('category')\n","df_updated_0_1 = df_updated[df_updated['Treatment']!=0]\n","model1 = feols(\"Q1 ~  Treatment | Age\", data = df_updated_0_1).vcov(\"hetero\")\n","model2= feols(\"Q2 ~  Treatment | Age\", data = df_updated_0_1).vcov(\"hetero\")\n","model3= feols(\"Q3 ~  Treatment | Age\", data = df_updated_0_1).vcov(\"hetero\")\n","model4= feols(\"Q4 ~  Treatment | Age\", data = df_updated_0_1).vcov(\"hetero\")\n","etable([model1, model2,model3, model4])"]},{"cell_type":"code","execution_count":40,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_S0X7Kc4_xSO","executionInfo":{"status":"ok","timestamp":1709852530032,"user_tz":300,"elapsed":360,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"7001f086-fd95-4621-88b1-ab6752ea82cc"},"outputs":[{"output_type":"stream","name":"stdout","text":["                       est1           est2           est3           est4\n","------------  -------------  -------------  -------------  -------------\n","depvar                   Q1             Q2             Q3             Q4\n","------------------------------------------------------------------------\n","Treatment     0.273 (0.211)  0.234 (0.268)  0.443 (0.371)  0.049 (0.115)\n","------------------------------------------------------------------------\n","Age                       x              x              x              x\n","------------------------------------------------------------------------\n","R2                    0.036          0.032          0.053          0.018\n","S.E. type            hetero         hetero         hetero         hetero\n","Observations             80             80             80             80\n","------------------------------------------------------------------------\n","Significance levels: * p < 0.05, ** p < 0.01, *** p < 0.001\n","Format of coefficient cell:\n","Coefficient (Std. Error)\n"]}],"source":["df_updated_0_1 = df_updated[df_updated['Treatment']!=2]\n","model1 = feols(\"Q1 ~  Treatment | Age\", data = df_updated_0_1).vcov(\"hetero\")\n","model2= feols(\"Q2 ~  Treatment | Age\", data = df_updated_0_1).vcov(\"hetero\")\n","model3= feols(\"Q3 ~  Treatment | Age\", data = df_updated_0_1).vcov(\"hetero\")\n","model4= feols(\"Q4 ~  Treatment | Age\", data = df_updated_0_1).vcov(\"hetero\")\n","etable([model1, model2,model3, model4])"]},{"cell_type":"markdown","metadata":{"id":"V7H7kS1h9vk6"},"source":["# Randomization"]},{"cell_type":"code","execution_count":41,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"fRwvNGQhilF_","executionInfo":{"status":"ok","timestamp":1709852530032,"user_tz":300,"elapsed":3,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"339a7a31-73ae-4729-9da9-5a545149d811"},"outputs":[{"output_type":"stream","name":"stdout","text":["0.431\n"]}],"source":["from statsmodels.stats.proportion import proportions_ztest\n","count = len(treat_1)+len(treat_2)\n","nobs = len(df_updated)\n","value = 2/3\n","\n","stat, pval = proportions_ztest(count, nobs, value)\n","print('{0:0.3f}'.format(pval))"]},{"cell_type":"markdown","metadata":{"id":"wXk-gGSGhlPo"},"source":["As the p-value is larger than 0.05, the null hypothesis that there are significnat difference between different treaetment arm cannot be rejected. There is no significance between different treatment arms, hence we do not need to concern about the randomization problem."]},{"cell_type":"code","execution_count":42,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"t3JW7kaXkhTS","executionInfo":{"status":"ok","timestamp":1709852548490,"user_tz":300,"elapsed":18460,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"8bf865c4-ef5c-48f9-858d-d510d330c0bc"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting stargazer\n","  Downloading stargazer-0.0.6-py3-none-any.whl (11 kB)\n","Installing collected packages: stargazer\n","Successfully installed stargazer-0.0.6\n"]}],"source":["!pip install stargazer"]},{"cell_type":"code","execution_count":43,"metadata":{"id":"IQ8grU_MkKtf","executionInfo":{"status":"ok","timestamp":1709852548491,"user_tz":300,"elapsed":22,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["import statsmodels.api as sm\n","import statsmodels.formula.api as smf\n","from stargazer.stargazer import Stargazer"]},{"cell_type":"code","execution_count":44,"metadata":{"id":"fDzFO7BcvSfP","executionInfo":{"status":"ok","timestamp":1709852548491,"user_tz":300,"elapsed":21,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["df_rand_check = df_updated.copy()"]},{"cell_type":"code","execution_count":45,"metadata":{"id":"6W2cVdUbvXja","executionInfo":{"status":"ok","timestamp":1709852548491,"user_tz":300,"elapsed":21,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["df_rand_check['Gender'] = pd.to_numeric(df_rand_check['Gender'].replace(['Female','Male'],[1,2]))\n","df_rand_check['Age'] = pd.to_numeric(df_rand_check['Age'].replace(['Under 18', '18-24', '25-34', '44 +'],[1,2,3,4]))\n","#df_rand_check = df_rand_check[(df_rand_check['Age'] == 2) | (df_rand_check['Age'] == 3)]"]},{"cell_type":"code","execution_count":46,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":288},"id":"TD2mIR9Psoid","executionInfo":{"status":"ok","timestamp":1709852548491,"user_tz":300,"elapsed":20,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"550be097-bc15-4c92-9158-89e7074e2103"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["<stargazer.stargazer.Stargazer at 0x79261f80c820>"],"text/html":["<table style=\"text-align:center\"><tr><td colspan=\"3\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align:left\"></td><tr><td style=\"text-align:left\"></td><td>(1)</td><td>(2)</td></tr>\n","<tr><td colspan=\"3\" style=\"border-bottom: 1px solid black\"></td></tr>\n","\n","<tr><td style=\"text-align:left\">Intercept</td><td>1.253<sup>***</sup></td><td>2.256<sup>***</sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.062)</td><td>(0.069)</td></tr>\n","<tr><td style=\"text-align:left\">Treatment</td><td>0.029<sup></sup></td><td>-0.084<sup></sup></td></tr>\n","<tr><td style=\"text-align:left\"></td><td>(0.053)</td><td>(0.055)</td></tr>\n","\n","<td colspan=\"3\" style=\"border-bottom: 1px solid black\"></td></tr>\n","<tr><td style=\"text-align: left\">Observations</td><td>111</td><td>111</td></tr><tr><td style=\"text-align: left\">R<sup>2</sup></td><td>0.003</td><td>0.025</td></tr><tr><td style=\"text-align: left\">Adjusted R<sup>2</sup></td><td>-0.006</td><td>0.016</td></tr><tr><td style=\"text-align: left\">Residual Std. Error</td><td>0.452 (df=109)</td><td>0.427 (df=109)</td></tr><tr><td style=\"text-align: left\">F Statistic</td><td>0.301<sup></sup> (df=1; 109)</td><td>2.319<sup></sup> (df=1; 109)</td></tr>\n","<tr><td colspan=\"3\" style=\"border-bottom: 1px solid black\"></td></tr><tr><td style=\"text-align: left\">Note:</td><td colspan=\"2\" style=\"text-align: right\"><sup>*</sup>p&lt;0.1; <sup>**</sup>p&lt;0.05; <sup>***</sup>p&lt;0.01</td></tr></table>"]},"metadata":{},"execution_count":46}],"source":["reg_gender = smf.ols('Gender ~ Treatment', data=df_rand_check).fit(cov_type='HC1')\n","reg_age = smf.ols('Age ~ Treatment', data=df_rand_check).fit(cov_type='HC1')\n","result = Stargazer([reg_gender, reg_age])\n","result"]},{"cell_type":"markdown","metadata":{"id":"ZGqzpv0Rhjyo"},"source":["# Cohen's D and Statistical Power analysis"]},{"cell_type":"code","execution_count":47,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":174},"id":"wh1p-xTxvvb1","executionInfo":{"status":"ok","timestamp":1709852548491,"user_tz":300,"elapsed":18,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"4a8c31e9-7ed3-460f-f6be-36eee0499a15"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["  Question      ATE1      ATE2\n","0       Q1  0.208110 -0.153846\n","1       Q2  0.183065 -0.142191\n","2       Q3  0.461153 -0.404605\n","3       Q4  0.052632 -0.052632"],"text/html":["\n","  <div id=\"df-e2e1a340-d49e-4a89-b573-12e50ff1444e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Question</th>\n","      <th>ATE1</th>\n","      <th>ATE2</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Q1</td>\n","      <td>0.208110</td>\n","      <td>-0.153846</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Q2</td>\n","      <td>0.183065</td>\n","      <td>-0.142191</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Q3</td>\n","      <td>0.461153</td>\n","      <td>-0.404605</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Q4</td>\n","      <td>0.052632</td>\n","      <td>-0.052632</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e2e1a340-d49e-4a89-b573-12e50ff1444e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-e2e1a340-d49e-4a89-b573-12e50ff1444e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-e2e1a340-d49e-4a89-b573-12e50ff1444e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-75394c85-10dd-4778-bbca-43633ef3275b\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-75394c85-10dd-4778-bbca-43633ef3275b')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-75394c85-10dd-4778-bbca-43633ef3275b button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"ATE_results","summary":"{\n  \"name\": \"ATE_results\",\n  \"rows\": 4,\n  \"fields\": [\n    {\n      \"column\": \"Question\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 4,\n        \"samples\": [\n          \"Q2\",\n          \"Q4\",\n          \"Q1\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ATE1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.1707988427275062,\n        \"min\": 0.052631578947368474,\n        \"max\": 0.4611528822055133,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          0.18306499701848544,\n          0.052631578947368474,\n          0.2081097197376267\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"ATE2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.15111472490554376,\n        \"min\": -0.4046052631578947,\n        \"max\": -0.052631578947368474,\n        \"num_unique_values\": 4,\n        \"samples\": [\n          -0.14219114219114237,\n          -0.052631578947368474,\n          -0.15384615384615374\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":47}],"source":["ATE_results = pd.DataFrame(ATE_results, columns = ['Question','ATE1','ATE2'])\n","ATE_results"]},{"cell_type":"code","execution_count":48,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Z2W8n6waroLB","executionInfo":{"status":"ok","timestamp":1709852559999,"user_tz":300,"elapsed":11525,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"c0650c13-5e9f-4fc8-a56c-07d6f2517985"},"outputs":[{"output_type":"stream","name":"stdout","text":["Collecting pingouin\n","  Downloading pingouin-0.5.4-py2.py3-none-any.whl (198 kB)\n","\u001b[?25l     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m0.0/198.9 kB\u001b[0m \u001b[31m?\u001b[0m eta \u001b[36m-:--:--\u001b[0m\r\u001b[2K     \u001b[91m━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[91m╸\u001b[0m\u001b[90m━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m92.2/198.9 kB\u001b[0m \u001b[31m2.6 MB/s\u001b[0m eta \u001b[36m0:00:01\u001b[0m\r\u001b[2K     \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m198.9/198.9 kB\u001b[0m \u001b[31m3.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hRequirement already satisfied: numpy in /usr/local/lib/python3.10/dist-packages (from pingouin) (1.25.2)\n","Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from pingouin) (1.11.4)\n","Requirement already satisfied: pandas>=1.5 in /usr/local/lib/python3.10/dist-packages (from pingouin) (1.5.3)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from pingouin) (3.7.1)\n","Requirement already satisfied: seaborn in /usr/local/lib/python3.10/dist-packages (from pingouin) (0.13.1)\n","Requirement already satisfied: statsmodels in /usr/local/lib/python3.10/dist-packages (from pingouin) (0.14.1)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.10/dist-packages (from pingouin) (1.2.2)\n","Collecting pandas-flavor (from pingouin)\n","  Downloading pandas_flavor-0.6.0-py3-none-any.whl (7.2 kB)\n","Requirement already satisfied: tabulate in /usr/local/lib/python3.10/dist-packages (from pingouin) (0.9.0)\n","Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.5->pingouin) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=1.5->pingouin) (2023.4)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pingouin) (1.2.0)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pingouin) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pingouin) (4.49.0)\n","Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pingouin) (1.4.5)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pingouin) (23.2)\n","Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pingouin) (9.4.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->pingouin) (3.1.1)\n","Requirement already satisfied: xarray in /usr/local/lib/python3.10/dist-packages (from pandas-flavor->pingouin) (2023.7.0)\n","Requirement already satisfied: joblib>=1.1.1 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->pingouin) (1.3.2)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.10/dist-packages (from scikit-learn->pingouin) (3.3.0)\n","Requirement already satisfied: patsy>=0.5.4 in /usr/local/lib/python3.10/dist-packages (from statsmodels->pingouin) (0.5.6)\n","Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from patsy>=0.5.4->statsmodels->pingouin) (1.16.0)\n","Installing collected packages: pandas-flavor, pingouin\n","Successfully installed pandas-flavor-0.6.0 pingouin-0.5.4\n"]}],"source":["!pip install pingouin\n","from statsmodels.stats.power import TTestPower"]},{"cell_type":"markdown","metadata":{"id":"oCc8H6IUufLT"},"source":["###Power for Q1"]},{"cell_type":"code","execution_count":49,"metadata":{"id":"zpyOu2NVoNu3","executionInfo":{"status":"ok","timestamp":1709852560638,"user_tz":300,"elapsed":654,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["q1_std_1 = np.std(df_updated[df_updated['Treatment']==1]['Q1'])\n","q1_std_0 = np.std(df_updated[df_updated['Treatment']==0]['Q1'])\n","cohens_d1_1 = ATE_results['ATE1'].iloc[0]/np.sqrt((q1_std_1**2+q1_std_0**2)/2)\n","from pingouin import power_ttest2n\n","\n","power1_1 = power_ttest2n(nx = len(df_updated[df_updated['Treatment']==0]), ny = len(df_updated[df_updated['Treatment']==1]), d = cohens_d1_1,\n","                      alpha = 0.05, alternative = 'two-sided')\n","n1_1 = TTestPower().solve_power(effect_size = cohens_d1_1, nobs = None, alpha = 0.05, power = 0.8, alternative='two-sided')"]},{"cell_type":"code","execution_count":50,"metadata":{"id":"wT7Gx7K0ug8D","executionInfo":{"status":"ok","timestamp":1709852560639,"user_tz":300,"elapsed":15,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["q1_std_1 = np.std(df_updated[df_updated['Treatment']==1]['Q1'])\n","q1_std_0 = np.std(df_updated[df_updated['Treatment']==2]['Q1'])\n","cohens_d1_2 = ATE_results['ATE2'].iloc[0]/np.sqrt((q1_std_1**2+q1_std_0**2)/2)\n","from pingouin import power_ttest2n\n","\n","power1_2 = power_ttest2n(nx = len(df_updated[df_updated['Treatment']==2]), ny = len(df_updated[df_updated['Treatment']==1]), d = cohens_d1_2,\n","                      alpha = 0.05, alternative = 'two-sided')\n","n1_2 = TTestPower().solve_power(effect_size = cohens_d1_2, nobs = None, alpha = 0.05, power = 0.8, alternative='two-sided')"]},{"cell_type":"markdown","metadata":{"id":"uIJeqyHExJm2"},"source":["###Power for Q2"]},{"cell_type":"code","execution_count":51,"metadata":{"id":"uF5_uzbuxGjf","executionInfo":{"status":"ok","timestamp":1709852560639,"user_tz":300,"elapsed":14,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["q1_std_1 = np.std(df_updated[df_updated['Treatment']==1]['Q1'])\n","q1_std_0 = np.std(df_updated[df_updated['Treatment']==0]['Q1'])\n","cohens_d2_1 = ATE_results['ATE1'].iloc[1]/np.sqrt((q1_std_1**2+q1_std_0**2)/2)\n","from pingouin import power_ttest2n\n","\n","power2_1 = power_ttest2n(nx = len(df_updated[df_updated['Treatment']==0]), ny = len(df_updated[df_updated['Treatment']==1]), d = cohens_d2_1,\n","                      alpha = 0.05, alternative = 'two-sided')\n","n2_1 = TTestPower().solve_power(effect_size = cohens_d2_1, nobs = None, alpha = 0.05, power = 0.8, alternative='two-sided')"]},{"cell_type":"code","execution_count":52,"metadata":{"id":"z7qM1umBxGjg","executionInfo":{"status":"ok","timestamp":1709852560962,"user_tz":300,"elapsed":337,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["q1_std_1 = np.std(df_updated[df_updated['Treatment']==1]['Q1'])\n","q1_std_0 = np.std(df_updated[df_updated['Treatment']==2]['Q1'])\n","cohens_d2_2 = ATE_results['ATE2'].iloc[1]/np.sqrt((q1_std_1**2+q1_std_0**2)/2)\n","from pingouin import power_ttest2n\n","\n","power2_2 = power_ttest2n(nx = len(df_updated[df_updated['Treatment']==2]), ny = len(df_updated[df_updated['Treatment']==1]), d = cohens_d2_2,\n","                      alpha = 0.05, alternative = 'two-sided')\n","n2_2 = TTestPower().solve_power(effect_size = cohens_d2_2, nobs = None, alpha = 0.05, power = 0.8, alternative='two-sided')"]},{"cell_type":"markdown","metadata":{"id":"O5aK_9aRxPva"},"source":["###Power for Q3"]},{"cell_type":"code","execution_count":53,"metadata":{"id":"maYLjLurxPvm","executionInfo":{"status":"ok","timestamp":1709852560962,"user_tz":300,"elapsed":15,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["q1_std_1 = np.std(df_updated[df_updated['Treatment']==1]['Q1'])\n","q1_std_0 = np.std(df_updated[df_updated['Treatment']==0]['Q1'])\n","cohens_d3_1 = ATE_results['ATE1'].iloc[2]/np.sqrt((q1_std_1**2+q1_std_0**2)/2)\n","from pingouin import power_ttest2n\n","\n","power3_1 = power_ttest2n(nx = len(df_updated[df_updated['Treatment']==0]), ny = len(df_updated[df_updated['Treatment']==1]), d = cohens_d3_1,\n","                      alpha = 0.05, alternative = 'two-sided')\n","n3_1 = TTestPower().solve_power(effect_size = cohens_d3_1, nobs = None, alpha = 0.05, power = 0.8, alternative='two-sided')"]},{"cell_type":"code","execution_count":54,"metadata":{"id":"chhdzDU2xPvm","executionInfo":{"status":"ok","timestamp":1709852560962,"user_tz":300,"elapsed":15,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["q1_std_1 = np.std(df_updated[df_updated['Treatment']==1]['Q1'])\n","q1_std_0 = np.std(df_updated[df_updated['Treatment']==2]['Q1'])\n","cohens_d3_2 = ATE_results['ATE2'].iloc[2]/np.sqrt((q1_std_1**2+q1_std_0**2)/2)\n","from pingouin import power_ttest2n\n","\n","power3_2 = power_ttest2n(nx = len(df_updated[df_updated['Treatment']==2]), ny = len(df_updated[df_updated['Treatment']==1]), d = cohens_d3_2,\n","                      alpha = 0.05, alternative = 'two-sided')\n","n3_2 = TTestPower().solve_power(effect_size = cohens_d3_2, nobs = None, alpha = 0.05, power = 0.8, alternative='two-sided')"]},{"cell_type":"markdown","metadata":{"id":"XFagSWoVxR_d"},"source":["###Power for Q4"]},{"cell_type":"code","execution_count":55,"metadata":{"id":"_GrOxzsCxR_e","executionInfo":{"status":"ok","timestamp":1709852560962,"user_tz":300,"elapsed":15,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["q1_std_1 = np.std(df_updated[df_updated['Treatment']==1]['Q1'])\n","q1_std_0 = np.std(df_updated[df_updated['Treatment']==0]['Q1'])\n","cohens_d4_1 = ATE_results['ATE1'].iloc[3]/np.sqrt((q1_std_1**2+q1_std_0**2)/2)\n","from pingouin import power_ttest2n\n","\n","power4_1 = power_ttest2n(nx = len(df_updated[df_updated['Treatment']==0]), ny = len(df_updated[df_updated['Treatment']==1]), d = cohens_d4_1,\n","                      alpha = 0.05, alternative = 'two-sided')\n","n4_1 = TTestPower().solve_power(effect_size = cohens_d4_1, nobs = None, alpha = 0.05, power = 0.8, alternative='two-sided')"]},{"cell_type":"code","execution_count":56,"metadata":{"id":"Ihm4rQtGxR_e","executionInfo":{"status":"ok","timestamp":1709852561246,"user_tz":300,"elapsed":298,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}}},"outputs":[],"source":["q1_std_1 = np.std(df_updated[df_updated['Treatment']==1]['Q1'])\n","q1_std_0 = np.std(df_updated[df_updated['Treatment']==2]['Q1'])\n","cohens_d4_2 = ATE_results['ATE2'].iloc[3]/np.sqrt((q1_std_1**2+q1_std_0**2)/2)\n","from pingouin import power_ttest2n\n","\n","power4_2 = power_ttest2n(nx = len(df_updated[df_updated['Treatment']==2]), ny = len(df_updated[df_updated['Treatment']==1]), d = cohens_d4_2,\n","                      alpha = 0.05, alternative = 'two-sided')\n","n4_2 = TTestPower().solve_power(effect_size = cohens_d4_2, nobs = None, alpha = 0.05, power = 0.8, alternative='two-sided')"]},{"cell_type":"code","execution_count":57,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"TFQAKRggF9yQ","executionInfo":{"status":"ok","timestamp":1709852561246,"user_tz":300,"elapsed":29,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"4c54ae6a-233d-4de5-de06-4b0b33406013"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                          Q1        Q2        Q3        Q4\n","Power (Treatment 1 vs Control)      0.173368  0.144793  0.612262  0.057556\n","Power (Treatment 2 vs Treatment 1)  0.092669  0.086345  0.354883  0.054899"],"text/html":["\n","  <div id=\"df-489a4ea3-bdd8-4bcf-9c1f-b4b8053d51b4\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Q1</th>\n","      <th>Q2</th>\n","      <th>Q3</th>\n","      <th>Q4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Power (Treatment 1 vs Control)</th>\n","      <td>0.173368</td>\n","      <td>0.144793</td>\n","      <td>0.612262</td>\n","      <td>0.057556</td>\n","    </tr>\n","    <tr>\n","      <th>Power (Treatment 2 vs Treatment 1)</th>\n","      <td>0.092669</td>\n","      <td>0.086345</td>\n","      <td>0.354883</td>\n","      <td>0.054899</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-489a4ea3-bdd8-4bcf-9c1f-b4b8053d51b4')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-489a4ea3-bdd8-4bcf-9c1f-b4b8053d51b4 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-489a4ea3-bdd8-4bcf-9c1f-b4b8053d51b4');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-fb68f989-8784-4d75-a8f0-1eb9d34bddf7\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb68f989-8784-4d75-a8f0-1eb9d34bddf7')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-fb68f989-8784-4d75-a8f0-1eb9d34bddf7 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"power","summary":"{\n  \"name\": \"power\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Q1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.05706278136483798,\n        \"min\": 0.0926686088826368,\n        \"max\": 0.17336756819552138,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.0926686088826368,\n          0.17336756819552138\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.041328659768469486,\n        \"min\": 0.08634528137304891,\n        \"max\": 0.14479283253232175,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.08634528137304891,\n          0.14479283253232175\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.18199418653913244,\n        \"min\": 0.35488324519116654,\n        \"max\": 0.6122618920678666,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.35488324519116654,\n          0.6122618920678666\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 0.001879381454830104,\n        \"min\": 0.05489858651293163,\n        \"max\": 0.05755643325522484,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          0.05489858651293163,\n          0.05755643325522484\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":57}],"source":["power_1_0 = pd.DataFrame([power1_1, power2_1, power3_1, power4_1], columns = [\"Power (Treatment 1 vs Control)\"], index = ['Q1','Q2','Q3','Q4'])\n","power_1_2 = pd.DataFrame([power1_2, power2_2, power3_2, power4_2], columns = [\"Power (Treatment 2 vs Treatment 1)\"], index = ['Q1','Q2','Q3','Q4'])\n","power = pd.concat([power_1_0, power_1_2], axis = 1).transpose()\n","power"]},{"cell_type":"code","execution_count":58,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":112},"id":"z1Mx8olczQmQ","executionInfo":{"status":"ok","timestamp":1709852561574,"user_tz":300,"elapsed":355,"user":{"displayName":"I-An Chien","userId":"17295908795382740373"}},"outputId":"7df97cde-b44d-4797-f918-25762eb6b890"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["                                                            Q1          Q2  \\\n","Number of observations (Treatment 1 vs Control)     150.723701  194.217749   \n","Number of observations (Treatment 2 vs Treatmen...  359.327156  420.318159   \n","\n","                                                           Q3           Q4  \n","Number of observations (Treatment 1 vs Control)     32.275565  2328.247663  \n","Number of observations (Treatment 2 vs Treatmen...  53.625820  3055.696724  "],"text/html":["\n","  <div id=\"df-9e211573-6167-4473-939e-6bf8b4e5432e\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Q1</th>\n","      <th>Q2</th>\n","      <th>Q3</th>\n","      <th>Q4</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Number of observations (Treatment 1 vs Control)</th>\n","      <td>150.723701</td>\n","      <td>194.217749</td>\n","      <td>32.275565</td>\n","      <td>2328.247663</td>\n","    </tr>\n","    <tr>\n","      <th>Number of observations (Treatment 2 vs Treatment 1)</th>\n","      <td>359.327156</td>\n","      <td>420.318159</td>\n","      <td>53.625820</td>\n","      <td>3055.696724</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9e211573-6167-4473-939e-6bf8b4e5432e')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9e211573-6167-4473-939e-6bf8b4e5432e button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9e211573-6167-4473-939e-6bf8b4e5432e');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-e41f0507-4a0a-4269-8df6-8ad2eb8c7f00\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e41f0507-4a0a-4269-8df6-8ad2eb8c7f00')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-e41f0507-4a0a-4269-8df6-8ad2eb8c7f00 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"number_of_observations","summary":"{\n  \"name\": \"number_of_observations\",\n  \"rows\": 2,\n  \"fields\": [\n    {\n      \"column\": \"Q1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 147.504917563277,\n        \"min\": 150.7237010277465,\n        \"max\": 359.32715596245816,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          359.32715596245816,\n          150.7237010277465\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 159.87713289757338,\n        \"min\": 194.21774929638707,\n        \"max\": 420.3181589534611,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          420.3181589534611,\n          194.21774929638707\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 15.09690992382188,\n        \"min\": 32.27556542447708,\n        \"max\": 53.62582018867095,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          53.62582018867095,\n          32.27556542447708\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"Q4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 514.3841637425694,\n        \"min\": 2328.247662986418,\n        \"max\": 3055.6967236211026,\n        \"num_unique_values\": 2,\n        \"samples\": [\n          3055.6967236211026,\n          2328.247662986418\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":58}],"source":["n_1_0 = pd.DataFrame([n1_1, n2_1, n3_1, n4_1], columns = [\"Number of observations (Treatment 1 vs Control)\"], index = ['Q1','Q2','Q3','Q4'])\n","n_1_2 = pd.DataFrame([n1_2, n2_2, n3_2, n4_2], columns = [\"Number of observations (Treatment 2 vs Treatment 1)\"], index = ['Q1','Q2','Q3','Q4'])\n","number_of_observations = pd.concat([n_1_0, n_1_2], axis = 1).transpose()\n","number_of_observations"]}],"metadata":{"colab":{"provenance":[{"file_id":"1PhcGXdM4F99RguTb7NzqzqoPo8uE-NRp","timestamp":1709830512682}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}